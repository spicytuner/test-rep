SQL> /
PACKAGE BODY bresnan_voice_dm                                                   
IS                                                                              
                                                                                
   FUNCTION get_sub_status_id(                                                  
      i_sub_status      VARCHAR2                                                
   )                                                                            
      RETURN NUMBER                                                             
   IS                                                                           
      i_sub_status_id   NUMBER(12);                                             
   BEGIN                                                                        
      SELECT status_id                                                          
      INTO i_sub_status_id                                                      
      FROM REF_SUB_STATUS,                                                      
           REF_STATUS                                                           
     WHERE sub_status_id = status_id                                            
       AND status = (SELECT DECODE(LOWER(i_sub_status),'active','active','suspen
ded','inactive',LOWER(i_sub_status)) FROM dual);                                
                                                                                
                                                                                
      RETURN i_sub_status_id;                                                   
   EXCEPTION                                                                    
      WHEN NO_DATA_FOUND THEN                                                   
         RETURN NULL;                                                           
   END get_sub_status_id;                                                       
                                                                                
                                                                                
   FUNCTION validate_parm(                                                      
      i_is_required     IN      PARM.IS_REQUIRED%TYPE,                          
      i_is_reserved     IN      PARM.IS_RESERVED%TYPE,                          
      i_dflt_val        IN      PARM.DFLT_VAL%TYPE,                             
      i_data_exists     IN      BOOLEAN,                                        
      i_external_value  IN      PARM.DFLT_VAL%TYPE                              
   )                                                                            
   RETURN BOOLEAN                                                               
   IS                                                                           
      i_validate        BOOLEAN;                                                
   BEGIN                                                                        
      IF (i_is_reserved = 'n') AND (i_is_required = 'y') AND (i_dflt_val IS NOT 
NULL) AND (i_data_exists = TRUE) THEN                                           
                                                                                
         IF (UPPER(i_dflt_val) <> RTRIM(LTRIM(UPPER(i_external_value)))) THEN   
            i_validate := TRUE;                                                 
         ELSE                                                                   
           i_validate := FALSE;                                                 
         END IF;                                                                
      ELSIF (i_is_reserved = 'n') AND (i_is_required = 'n') AND (i_dflt_val IS N
ULL) AND (i_data_exists = TRUE) THEN                                            
                                                                                
         i_validate := TRUE;                                                    
      ELSIF (i_is_reserved = 'n') AND (i_is_required = 'n') AND (i_dflt_val IS N
OT NULL) AND (i_data_exists = TRUE) THEN                                        
                                                                                
         i_validate := TRUE;                                                    
      ELSIF (i_is_reserved = 'n') AND (i_is_required = 'y') AND (i_dflt_val IS N
ULL) AND (i_data_exists = TRUE) THEN                                            
                                                                                
         i_validate := TRUE;                                                    
      END IF;                                                                   
      RETURN i_validate;                                                        
   END validate_parm;                                                           
                                                                                
FUNCTION insert_sub_parm (                                                      
      i_account_number       IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,          
      i_STATUS                     IN      varchar2,                            
      MAX_NUM_OF_IA        IN     varchar2,                                     
      MAX_NUM_OF_VL        IN     varchar2,                                     
      i_sub_id                       IN      SUB.SUB_ID%TYPE,                   
      i_N2P_STATUS            IN      DM_V_N2P_STATUS.N2P_STATUS%TYPE           
    )                                                                           
   RETURN VARCHAR2                                                              
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         i_validate_parm         BOOLEAN := NULL;                               
         i_data_exists             BOOLEAN := NULL;                             
         i_records                    NUMBER := 0;                              
         i_sub_type                  VARCHAR2(100);                             
         --                                                                     
      BEGIN                                                                     
             FOR c IN ( SELECT parm_id, parm_nm, is_required, is_reserved, is_un
ique, dflt_val                                                                  
                                                                                
                FROM PARM                                                       
           WHERE class_id = k_sub                                               
             AND parm_nm IN ('acct','status','max_number_of_internet_services','
max_number_of_voice_lines','sub_locked','net2phone_acct_created'))              
                                                                                
            LOOP                                                                
                i_validate_parm := NULL;                                        
                i_data_exists := NULL;                                          
                                                                                
                --sparm_get_data_row := sparm_get_data_record (i);              
                                                                                
                --Populate SUB_PARM record                                      
                                                                                
                                                                                
                --Process PARM= 'account_number'                                
                IF c.parm_nm = 'acct' AND i_account_number IS NOT NULL THEN     
		   i_data_exists := TRUE;                                                     
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, i
_account_number);                                                               
                                                                                
                                                                                
                   IF i_validate_parm = TRUE THEN                               
	      	     sparm_put_data_row.SUB_ID := i_sub_id;                             
                     sparm_put_data_row.PARM_ID := c.parm_id;                   
	              sparm_put_data_row.VAL := i_account_number;                      
                      sparm_put_data_record (p_sparm_ctr) := sparm_put_data_row;
                                                                                
                                                                                
                      p_sparm_ctr := p_sparm_ctr + 1;                           
                      i_records := i_records + 1;                               
		      ----insert_sub_logical(i_account_number, i_sub_id, 'SUB_PARM', 'SUB_ID',
 i_sub_id, 'PARM_ID', c.parm_id,'Success');                                     
                                                                                
                   END IF;                                                      
                ELSIF c.parm_nm = 'max_number_of_internet_services' AND MAX_NUM_
OF_IA IS NOT NULL THEN                                                          
                                                                                
		   i_data_exists := TRUE;                                                     
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, M
AX_NUM_OF_IA);                                                                  
                                                                                
                                                                                
                   IF i_validate_parm = TRUE THEN                               
		      sparm_put_data_row.SUB_ID := i_sub_id;                                  
                      sparm_put_data_row.PARM_ID := c.parm_id;                  
	              sparm_put_data_row.VAL := MAX_NUM_OF_IA;                         
                      sparm_put_data_record (p_sparm_ctr) := sparm_put_data_row;
                                                                                
                                                                                
                      p_sparm_ctr := p_sparm_ctr + 1;                           
                      i_records := i_records + 1;                               
		      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_PARM', 'SUB_ID', i
_sub_id, 'PARM_ID', c.parm_id,'Success');                                       
                                                                                
                   END IF;                                                      
               ELSIF c.parm_nm = 'net2phone_acct_created' AND i_N2P_STATUS IS NO
T NULL THEN                                                                     
                                                                                
		   i_data_exists := TRUE;                                                     
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, i
_N2P_STATUS);                                                                   
                                                                                
                                                                                
                   IF i_validate_parm = TRUE THEN                               
		      sparm_put_data_row.SUB_ID := i_sub_id;                                  
                      sparm_put_data_row.PARM_ID := c.parm_id;                  
                                                                                
		      if i_N2P_STATUS = 'A' OR i_N2P_STATUS = 'S' then                        
	              sparm_put_data_row.VAL := 'Y';                                   
		      else                                                                    
		      sparm_put_data_row.VAL := 'N';                                          
		      end if;                                                                 
                                                                                
                      sparm_put_data_record (p_sparm_ctr) := sparm_put_data_row;
                                                                                
                                                                                
                      p_sparm_ctr := p_sparm_ctr + 1;                           
                      i_records := i_records + 1;                               
		      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_PARM', 'SUB_ID', i
_sub_id, 'PARM_ID', c.parm_id,'Success');                                       
                                                                                
                   END IF;                                                      
                ELSIF c.parm_nm = 'max_number_of_voice_lines' AND MAX_NUM_OF_VL 
IS NOT NULL THEN                                                                
                                                                                
		   i_data_exists := TRUE;                                                     
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, M
AX_NUM_OF_VL);                                                                  
                                                                                
                                                                                
                   IF i_validate_parm = TRUE THEN                               
		      sparm_put_data_row.SUB_ID := i_sub_id;                                  
	              sparm_put_data_row.PARM_ID := c.parm_id;                         
	              sparm_put_data_row.VAL := MAX_NUM_OF_VL;                         
                      sparm_put_data_record (p_sparm_ctr) := sparm_put_data_row;
                                                                                
                                                                                
                      p_sparm_ctr := p_sparm_ctr + 1;                           
                      i_records := i_records + 1;                               
		      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_PARM', 'SUB_ID', i
_sub_id, 'PARM_ID', c.parm_id,'Success');                                       
                                                                                
                   END IF;                                                      
                ELSIF c.parm_nm = 'sub_locked'  THEN                            
		       sparm_put_data_row.SUB_ID := i_sub_id;                                 
                       sparm_put_data_row.PARM_ID := c.parm_id;                 
		       sparm_put_data_row.VAL := 'N';                                         
                       sparm_put_data_record (p_sparm_ctr) := sparm_put_data_row
;                                                                               
                                                                                
                      p_sparm_ctr := p_sparm_ctr + 1;                           
                      i_records := i_records + 1;                               
		      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_PARM', 'SUB_ID', i
_sub_id, 'PARM_ID', c.parm_id,'Success');                                       
                                                                                
                                                                                
                END IF;                                                         
                                                                                
            END LOOP;                                                           
                                                                                
         slog_put_data_row.RS_SUB_PARM := 'Success -'                           
                                       || ' [p_sparm_ctr: ' || p_sparm_ctr      
                                       || ' records: ' || i_records || ']';     
                                                                                
                                                                                
         RETURN slog_put_data_row.RS_SUB_PARM;                                  
      END;                                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
        dbms_output.put_line('Sub_Parm excep '||substr(SQLERRM,0,200));         
        slog_put_data_row.RS_SUB_PARM := 'Exception-Others';                    
        RETURN slog_put_data_row.RS_SUB_PARM;                                   
   END insert_sub_parm;                                                         
                                                                                
PROCEDURE insert_sub_logical(                                                   
      isl_account_number    IN      DM_VOICE_SUB_LOGICAL.account_number%TYPE,   
      isl_sub_id        IN      DM_VOICE_SUB_LOGICAL.SUB_ID%TYPE,               
      isl_tname         IN      DM_VOICE_SUB_LOGICAL.TNAME%TYPE,                
      isl_sub_key1      IN      DM_VOICE_SUB_LOGICAL.SUB_KEY1%TYPE,             
      isl_sub_key1_id   IN      DM_VOICE_SUB_LOGICAL.SUB_KEY1_ID%TYPE,          
      isl_sub_key2      IN      DM_VOICE_SUB_LOGICAL.SUB_KEY2%TYPE,             
      isl_sub_key2_id   IN      DM_VOICE_SUB_LOGICAL.SUB_KEY2_ID%TYPE,          
      isl_sub_status    IN      DM_VOICE_SUB_LOGICAL.SUB_STATUS%TYPE            
   )                                                                            
   IS                                                                           
   BEGIN                                                                        
      --DM_VOICE_SUB_LOGICAL                                                    
      sent_put_data_row.account_number := isl_account_number;                   
      sent_put_data_row.SUB_ID := isl_sub_id;                                   
      sent_put_data_row.TNAME := isl_tname;                                     
      sent_put_data_row.SUB_KEY1 := isl_sub_key1;                               
      sent_put_data_row.SUB_KEY1_ID := isl_sub_key1_id;                         
      sent_put_data_row.SUB_KEY2 := isl_sub_key2;                               
      sent_put_data_row.SUB_KEY2_ID := isl_sub_key2_id;                         
      sent_put_data_row.SUB_STATUS := isl_sub_status;                           
      --                                                                        
      sent_put_data_record (p_sent_ctr) := sent_put_data_row;                   
      p_sent_ctr := p_sent_ctr + 1;                                             
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN;                                                                   
   END insert_sub_logical;                                                      
                                                                                
  FUNCTION get_sub_addr_typ_id(                                                 
      i_sub_addr_type      VARCHAR2                                             
   )                                                                            
      RETURN NUMBER                                                             
   IS                                                                           
      i_sub_addr_typ_id   NUMBER(12);                                           
   BEGIN                                                                        
                                                                                
         IF i_sub_addr_type = 'service' THEN                                    
                i_sub_addr_typ_id := 1;                                         
         END IF;                                                                
                                                                                
         RETURN i_sub_addr_typ_id;                                              
   EXCEPTION                                                                    
      WHEN NO_DATA_FOUND THEN                                                   
         RETURN NULL;                                                           
   END get_sub_addr_typ_id;                                                     
                                                                                
FUNCTION insert_sub_address (                                                   
      i_account_number      IN      DM_VOICE_SUB.account_number%TYPE,           
      i_sub_id                      IN      SUB.SUB_ID%TYPE,                    
      i_location_id               IN      LOCATION.LOCATION_ID%TYPE,            
      i_pref_nm                   IN      SUB_ADDR.preferred_nm%TYPE,           
      i_street_nm                IN      DM_VOICE_SUB.street_name%TYPE,         
      i_city                           IN      DM_VOICE_SUB.CITY%TYPE,          
      i_province_state         IN      DM_VOICE_SUB.state%TYPE,                 
      i_zipcode                     IN      DM_VOICE_SUB.zipcode%TYPE,          
      i_head_end                 IN      DM_V_SUBSCRIBER_DETAILS.head_end%TYPE, 
      i_bridger_node            IN      DM_V_SUBSCRIBER_DETAILS.bridger_node%TYP
E,                                                                              
                                                                                
      i_addr_type                 IN      VARCHAR2,                             
      k_created_dtm            IN      DATE                                     
   )                                                                            
   RETURN NUMBER                                                                
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         --                                                                     
         i_sub_addr_id           SUB_ADDR.SUB_ADDR_ID%TYPE;                     
         i_records                   NUMBER := 0;                               
         --                                                                     
      BEGIN                                                                     
                --Populate SUB ADDRESS record                                   
            SELECT sub_addr_seq.NEXTVAL INTO i_sub_addr_id FROM dual;           
            saddr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                    
            saddr_put_data_row.SUB_ID := i_sub_id;                              
            saddr_put_data_row.ADDR_TYP_ID := get_sub_addr_typ_id(i_addr_type); 
            saddr_put_data_row.LOCATION_ID := i_location_id;                    
            saddr_put_data_row.PREFERRED_NM := i_pref_nm;                       
            saddr_put_data_row.IS_DFLT := 'y';                                  
            saddr_put_data_row.CREATED_DTM := k_created_dtm;                    
            saddr_put_data_row.ADDR_STATUS_ID := 82;                            
            saddr_put_data_row.SAMP_VER := 3;                                   
            saddr_put_data_row.CREATED_BY := k_created_by;                      
            saddr_put_data_row.MODIFIED_DTM := k_modified_dtm;                  
            saddr_put_data_row.MODIFIED_BY := k_modified_by;                    
            saddr_put_data_row.PRE_STATUS_ID := 88;                             
                                                                                
            saddr_put_data_record (p_saddr_ctr) := saddr_put_data_row;          
            p_saddr_ctr := p_saddr_ctr + 1;                                     
            i_records := i_records + 1;                                         
            --insert_sub_logical(i_account_number, i_sub_id, 'SUB_ADDR', 'SUB_AD
DR_ID', i_sub_addr_id, NULL, NULL, 'Success');                                  
                                                                                
            --                                                                  
            IF k_debug = 'Y' THEN                                               
               DBMS_OUTPUT.PUT_LINE('Starting Location_Dtl...');                
            END IF;                                                             
            --                                                                  
                                                                                
            --Call LOCATION_DTL                                                 
            slog_put_data_row.RS_SUB_LOCATION_DTL := insert_location_dtl(i_accou
nt_number,                                                                      
                                                                                
                                                                         i_sub_i
d,                                                                              
                                                                                
                                                                         i_locat
ion_id,                                                                         
                                                                                
                                                                         i_city,
                                                                                
                                                                                
                                                                         i_provi
nce_state,                                                                      
                                                                                
                                                                         i_zipco
de,                                                                             
                                                                                
									 i_street_nm,                                                          
                                                                         i_head_
end,                                                                            
                                                                                
									 i_bridger_node,                                                       
                                                                         i_pref_
nm);                                                                            
                                                                                
                                                                                
                                                                                
            slog_put_data_row.RS_SUB_ADDRESS := 'Success'                       
                                             || ' [p_addr_ctr: ' || p_saddr_ctr 
                                             || ' records: ' || i_records || ']'
;                                                                               
                                                                                
                                                                                
            RETURN i_sub_addr_id;                                               
      END;                                                                      
   EXCEPTION                                                                    
        WHEN OTHERS THEN                                                        
             slog_put_data_row.RS_SUB_ADDRESS := 'Exception-Others';            
             RETURN NULL;                                                       
   END insert_sub_address;                                                      
                                                                                
 FUNCTION insert_location_dtl (                                                 
      i_account_number         IN      DM_VOICE_SUB.account_number%TYPE,        
      i_sub_id                                IN      SUB.SUB_ID%TYPE,          
      i_location_id                         IN      LOCATION_DTL.LOCATION_ID%TYP
E,                                                                              
                                                                                
      i_city                                     IN      DM_VOICE_SUB.CITY%TYPE,
                                                                                
                                                                                
      i_province_state                   IN      DM_VOICE_SUB.state%TYPE,       
      i_zipcode                              IN      DM_VOICE_SUB.ZIPCODE%TYPE, 
      i_street_nm                          IN      DM_VOICE_SUB.STREET_NAME%TYPE
,                                                                               
                                                                                
      i_head_end                          IN      DM_V_SUBSCRIBER_DETAILS.head_e
nd%TYPE,                                                                        
                                                                                
      i_bridger_node                     IN      DM_V_SUBSCRIBER_DETAILS.bridger
_node%TYPE,                                                                     
                                                                                
      i_pref_nm                             IN      SUB_ADDR.preferred_nm%TYPE  
    )                                                                           
   RETURN VARCHAR2                                                              
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         i_validate_parm          BOOLEAN := NULL;                              
         i_data_exists            BOOLEAN := NULL;                              
         i_records                NUMBER := 0;                                  
         --                                                                     
      BEGIN                                                                     
         FOR c IN (SELECT parm_id, parm_nm, is_required, is_reserved, is_unique,
 dflt_val                                                                       
                                                                                
            FROM PARM                                                           
           WHERE class_id = k_location_category                                 
             AND parm_nm IN ('street_nm','province_state','city','head_end','zip
code','bridger_node'))                                                          
                                                                                
         LOOP                                                                   
                                                                                
            i_validate_parm   := NULL;                                          
            i_data_exists     := NULL;                                          
           -- locd_get_data_row := locd_get_data_record (i);                    
                                                                                
            --Populate LOCATION_DTL record                                      
            locd_put_data_row.LOCATION_ID := i_location_id;                     
                                                                                
            --Process PARM='hsd_address','city','state','zipcode','node'        
                                                                                
        IF c.parm_nm = 'city' AND i_city IS NOT NULL THEN                       
               i_data_exists := TRUE;                                           
                                                                                
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_cit
y);                                                                             
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_city;                 
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
           ELSIF c.parm_nm = 'province_state' AND i_province_state IS NOT NULL T
HEN                                                                             
                                                                                
               i_data_exists := TRUE;                                           
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_pro
vince_state);                                                                   
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_province_state;       
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
           ELSIF c.parm_nm = 'zipcode' AND i_zipcode IS NOT NULL THEN           
               i_data_exists := TRUE;                                           
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_zip
code);                                                                          
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_zipcode;              
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
            ELSIF c.parm_nm = 'street_nm' AND i_street_nm IS NOT NULL THEN      
               i_data_exists := TRUE;                                           
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_str
eet_nm);                                                                        
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_street_nm;            
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
            ELSIF c.parm_nm = 'head_end' AND i_head_end IS NOT NULL THEN        
               i_data_exists := TRUE;                                           
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_hea
d_end);                                                                         
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_head_end;             
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
             ELSIF c.parm_nm = 'bridger_node' AND i_bridger_node IS NOT NULL THE
N                                                                               
                                                                                
               i_data_exists := TRUE;                                           
               i_validate_parm := validate_parm(c.is_required, c.is_reserved,   
                                                c.dflt_val, i_data_exists, i_bri
dger_node);                                                                     
                                                                                
               IF i_validate_parm = TRUE THEN                                   
                  locd_put_data_row.PARM_ID := c.parm_id;                       
                  locd_put_data_row.LOCATION_DTL_VAL := i_bridger_node;         
                  locd_put_data_record (p_locd_ctr) := locd_put_data_row;       
                  p_locd_ctr := p_locd_ctr + 1;                                 
                  i_records := i_records + 1;                                   
                  --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION_DTL
', 'LOCATION_ID', i_location_id, 'PARM-ID',c.parm_id, 'Success');               
                                                                                
               END IF;                                                          
            END IF;                                                             
         END LOOP;                                                              
                                                                                
         slog_put_data_row.RS_SUB_LOCATION_DTL := 'Success -'                   
                                                  || ' [p_locd_ctr: ' || p_locd_
ctr                                                                             
                                                                                
                                                  || ' records: ' || i_records |
| ']';                                                                          
                                                                                
         --                                                                     
         IF k_debug = 'Y' THEN                                                  
               DBMS_OUTPUT.PUT_LINE('Insert_LocationDtl:: [' || TO_CHAR(SYSDATE,
'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                             
                                                                                
                                    || ' account_number: ' || i_account_number  
                                    || ' SubId: ' || i_sub_id                   
                                    || ' LocationId: ' || i_location_id         
                                    || ' Status : ' || slog_put_data_row.RS_SUB_
LOCATION_DTL);                                                                  
                                                                                
         END IF;                                                                
         --                                                                     
                                                                                
         RETURN slog_put_data_row.RS_SUB_LOCATION_DTL;                          
      END;                                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      slog_put_data_row.RS_SUB_LOCATION_DTL := 'Exception-Others';              
      RETURN slog_put_data_row.RS_SUB_LOCATION_DTL;                             
   END insert_location_dtl;                                                     
                                                                                
   FUNCTION insert_sub_contact (                                                
      i_account_number       IN      DM_VOICE_SUB.account_number%TYPE,          
      i_sub_id                       IN      SUB.SUB_ID%TYPE,                   
      i_location_id                IN      LOCATION.LOCATION_ID%TYPE,           
      i_first_name                 IN      DM_VOICE_SUB.first_name%TYPE,        
      i_last_name                 IN      DM_VOICE_SUB.last_name%TYPE,          
      i_home_phone             IN      DM_VOICE_SUB.HOME_PHONE%TYPE,            
      i_business_phone        IN      varchar2,                                 
      k_created_dtm             IN      DATE                                    
   )                                                                            
   RETURN VARCHAR2                                                              
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         --                                                                     
         i_sub_contact_id        SUB_CONTACT_PARM.SUB_CONTACT_ID%TYPE;          
         i_records               NUMBER := 0;                                   
         --                                                                     
      BEGIN                                                                     
            SELECT sub_contact_seq.NEXTVAL INTO i_sub_contact_id FROM dual;     
                                                                                
            --Populate SUB CONTACT record                                       
            scont_put_data_row.SUB_CONTACT_ID := i_sub_contact_id;              
            scont_put_data_row.SUB_ID := i_sub_id;                              
            scont_put_data_row.CONTACT_TYP_ID := 1;                             
            scont_put_data_row.SAMP_VER := 0;                                   
            scont_put_data_row.CONTACT_STATUS_ID := 62;                         
            scont_put_data_row.LOCATION_ID := i_location_id;                    
            scont_put_data_row.CREATED_DTM := k_created_dtm;                    
            scont_put_data_row.CREATED_BY := k_created_by;                      
            scont_put_data_row.PREFERRED_NM := NULL;                            
            scont_put_data_row.PRE_STATUS_ID := 69;                             
            scont_put_data_row.MODIFIED_DTM := k_modified_dtm;                  
            scont_put_data_row.MODIFIED_BY := k_modified_by;                    
            --                                                                  
            scont_put_data_record (p_scont_ctr) := scont_put_data_row;          
            p_scont_ctr := p_scont_ctr + 1;                                     
            i_records := i_records + 1;                                         
            --insert_sub_logical(i_account_number, i_sub_id, 'SUB_CONTACT', 'SUB
_CONTACT_ID', i_sub_contact_id, NULL, NULL, 'Success');                         
                                                                                
                                                                                
            --                                                                  
            IF k_debug = 'Y' THEN                                               
               DBMS_OUTPUT.PUT_LINE('Starting SubContactParm...');              
            END IF;                                                             
            --                                                                  
            slog_put_data_row.RS_SUB_CONTACT_PARM := insert_sub_contact_parm(i_a
ccount_number,                                                                  
                                                                                
                                                                             i_s
ub_id,                                                                          
                                                                                
                                                                             i_s
ub_contact_id,                                                                  
                                                                                
                                                                             i_f
irst_name,                                                                      
                                                                                
                                                                             i_l
ast_name,                                                                       
                                                                                
                                                                             i_h
ome_phone,                                                                      
                                                                                
									     i_business_phone);                                                
                                                                                
            IF SUBSTR(slog_put_data_row.RS_SUB_CONTACT_PARM,1,7) = 'Success' THE
N                                                                               
                                                                                
                slog_put_data_row.RS_SUB_CONTACT := 'Success'                   
                                                 || ' [p_scont_ctr: ' || p_scont
_ctr                                                                            
                                                                                
                                                 || ' records: ' || i_records ||
 ']';                                                                           
                                                                                
            ELSE                                                                
                slog_put_data_row.RS_SUB_CONTACT := 'Failure';                  
            END IF;                                                             
            --                                                                  
           IF k_debug = 'Y' THEN                                                
              DBMS_OUTPUT.PUT_LINE('Insert_SubContact:: [' || TO_CHAR(SYSDATE,'D
D-MON-YYYY HH24:MI:SS:RR') || ']'                                               
                                                                                
                                || ' csg_account_number: ' || i_account_number  
                                || ' SubId: ' || i_sub_id                       
                                || ' SubConactId: ' || i_sub_contact_id         
                                || ' Status : ' || slog_put_data_row.RS_SUB_CONT
ACT);                                                                           
                                                                                
           END IF;                                                              
           --                                                                   
                                                                                
           RETURN slog_put_data_row.RS_SUB_CONTACT;                             
      END;                                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
        slog_put_data_row.RS_SUB_CONTACT := 'Exception-Others';                 
        RETURN slog_put_data_row.RS_SUB_CONTACT;                                
   END insert_sub_contact;                                                      
                                                                                
FUNCTION insert_sub_contact_parm (                                              
      i_account_number         IN      DM_VOICE_SUB.account_number%TYPE,        
      i_sub_id                         IN      SUB.SUB_ID%TYPE,                 
      i_sub_contact_id           IN      SUB_CONTACT_PARM.SUB_CONTACT_ID%TYPE,  
      i_first_name                  IN       DM_VOICE_SUB.first_name%TYPE,      
      i_last_name                   IN      DM_VOICE_SUB.last_name%TYPE,        
      i_home_phone               IN      DM_VOICE_SUB.HOME_PHONE%TYPE,          
      i_business_phone          IN      VARCHAR2                                
   )                                                                            
   RETURN VARCHAR2                                                              
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         i_validate_parm           BOOLEAN := NULL;                             
         i_data_exists             BOOLEAN := NULL;                             
         i_records                 NUMBER := 0;                                 
         --                                                                     
      BEGIN                                                                     
         FOR c IN (SELECT parm_id, parm_nm, is_required, is_reserved, is_unique,
 dflt_val                                                                       
                                                                                
            FROM PARM                                                           
           WHERE class_id = k_sub_contact                                       
             AND parm_nm IN ('first_name', 'last_name','phones.business.number',
'phones.home.number'))                                                          
                                                                                
         LOOP                                                                   
             i_validate_parm   := NULL;                                         
             i_data_exists     := NULL;                                         
             --sctparm_get_data_row := sctparm_get_data_record (i);             
                                                                                
             --Populate SUB_CONTACT_PARM record                                 
             sctparm_put_data_row.SUB_CONTACT_ID := i_sub_contact_id;           
             sctparm_put_data_row.PARM_ID := c.parm_id;                         
                                                                                
             --Process PARM='first_name', 'last_name'                           
             IF c.parm_nm = 'first_name' AND i_first_name IS NOT NULL THEN      
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(c.is_required, c.is_reserved,  
                                                 c.dflt_val, i_data_exists, i_fi
rst_name);                                                                      
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   sctparm_put_data_row.VAL := i_first_name;                    
                   sctparm_put_data_record (p_sctparm_ctr) := sctparm_put_data_r
ow;                                                                             
                                                                                
                   p_sctparm_ctr := p_sctparm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_CONTACT
_PARM', 'SUB_CONTACT_ID', i_sub_contact_id,'PARM-ID', c.parm_id, 'Success');    
                                                                                
                END IF;                                                         
             ELSIF c.parm_nm = 'last_name' AND i_last_name IS NOT NULL THEN     
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(c.is_required, c.is_reserved,  
                                                 c.dflt_val, i_data_exists, i_la
st_name);                                                                       
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   sctparm_put_data_row.VAL := i_last_name;                     
                   sctparm_put_data_record (p_sctparm_ctr) := sctparm_put_data_r
ow;                                                                             
                                                                                
                   p_sctparm_ctr := p_sctparm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_CONTACT
_PARM', 'SUB_CONTACT_ID', i_sub_contact_id,'PARM-ID', c.parm_id, 'Success');    
                                                                                
                END IF;                                                         
             ELSIF c.parm_nm = 'phones.home.number' AND i_home_phone IS NOT NULL
 THEN                                                                           
                                                                                
                   i_data_exists := TRUE;                                       
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, i
_home_phone);                                                                   
                                                                                
                   IF i_validate_parm = TRUE THEN                               
                      sctparm_put_data_row.VAL := i_home_phone;                 
                      sctparm_put_data_record (p_sctparm_ctr) := sctparm_put_dat
a_row;                                                                          
                                                                                
                      p_sctparm_ctr := p_sctparm_ctr + 1;                       
                      i_records := i_records + 1;                               
                      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_CONT
ACT_PARM', 'SUB_CONTACT_ID', i_sub_contact_id,'PARM-ID', c.parm_id, 'Success'); 
                                                                                
                   END IF;                                                      
               ELSIF c.parm_nm = 'phones.business.number' AND i_business_phone I
S NOT NULL THEN                                                                 
                                                                                
                   i_data_exists := TRUE;                                       
                   i_validate_parm := validate_parm(c.is_required, c.is_reserved
,                                                                               
                                                                                
                                                    c.dflt_val, i_data_exists, i
_business_phone);                                                               
                                                                                
                   IF i_validate_parm = TRUE THEN                               
                      sctparm_put_data_row.VAL := i_business_phone;             
                      sctparm_put_data_record (p_sctparm_ctr) := sctparm_put_dat
a_row;                                                                          
                                                                                
                      p_sctparm_ctr := p_sctparm_ctr + 1;                       
                      i_records := i_records + 1;                               
                      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_CONT
ACT_PARM', 'SUB_CONTACT_ID', i_sub_contact_id,'PARM-ID', c.parm_id, 'Success'); 
                                                                                
                   END IF;                                                      
             END IF;                                                            
         END LOOP;                                                              
                                                                                
         slog_put_data_row.RS_SUB_CONTACT_PARM := 'Success -'                   
                                                  || ' [p_sctparm_ctr: ' || p_sc
tparm_ctr                                                                       
                                                                                
                                                  || ' records: ' || i_records |
| ']';                                                                          
                                                                                
         --                                                                     
         IF k_debug = 'Y' THEN                                                  
               DBMS_OUTPUT.PUT_LINE('Insert_SubContactParm:: [' || TO_CHAR(SYSDA
TE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                          
                                                                                
                                    || ' csg_account_number: ' || i_account_numb
er                                                                              
                                                                                
                                    || ' SubId: ' || i_sub_id                   
                                    || ' SubContactId: ' || i_sub_contact_id    
                                    || ' Status : ' || slog_put_data_row.RS_SUB_
CONTACT_PARM);                                                                  
                                                                                
         END IF;                                                                
         --                                                                     
                                                                                
         RETURN slog_put_data_row.RS_SUB_CONTACT_PARM;                          
      END;                                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      slog_put_data_row.RS_SUB_CONTACT_PARM := 'Exception-Others';              
      RETURN slog_put_data_row.RS_SUB_CONTACT_PARM;                             
   END insert_sub_contact_parm;                                                 
                                                                                
                                                                                
FUNCTION insert_sub_svc_samp (                 --samp sub service               
      i_account_number				 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,            
      i_sub_id					         IN      SUB.SUB_ID%TYPE,                            
      i_sub_addr_id				         IN      SUB_ADDR.SUB_ADDR_ID%TYPE,              
      k_created_dtm				         IN      DATE,                                   
      i_sub_typ_id                                      IN      SUB.SUB_TYP_ID%T
YPE,                                                                            
                                                                                
       i_first_name		                         IN       DM_VOICE_SUB.first_name%T
YPE,                                                                            
                                                                                
      i_last_name				         IN      DM_VOICE_SUB.last_name%TYPE,              
      i_home_phone					 IN      DM_VOICE_SUB.HOME_PHONE%TYPE,                   
      i_status                                              IN       VARCHAR2,  
      I_N2P_STATUS                                   IN      DM_V_N2P_STATUS.N2P
_STATUS%TYPE                                                                    
                                                                                
      )                                                                         
   RETURN NUMBER                                                                
   IS                                                                           
   BEGIN                                                                        
      DECLARE                                                                   
         i_sub_svc_id                             SUB_SVC.SUB_SVC_ID%TYPE;      
	 isp_composed_sub_svc_id       SUB_SVC.SUB_SVC_ID%TYPE;                        
      BEGIN                                                                     
         SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;                
                                                                                
         --SVC_ID=1, samp_sub                                                   
         ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                          
         ssvc_put_data_row.SUB_ID := i_sub_id;                                  
         ssvc_put_data_row.START_DT := k_created_dtm;                           
         ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id || '_samp_sub_'||i_accou
nt_number;                                                                      
                                                                                
         ssvc_put_data_row.SAMP_VER := 0;                                       
         if i_status is not null then                                           
	 ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                                    
	 else                                                                          
         ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                             
	 end if;                                                                       
         ssvc_put_data_row.CREATED_DTM := k_created_dtm;                        
         ssvc_put_data_row.CREATED_BY := k_created_by;                          
         ssvc_put_data_row.END_DT := NULL;                                      
         ssvc_put_data_row.PURCHASE_DT := NULL;                                 
         ssvc_put_data_row.PARENT_SUB_SVC_ID := NULL;                           
         ssvc_put_data_row.PRE_STATUS_ID := 33;                                 
         ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                      
         ssvc_put_data_row.MODIFIED_BY := k_modified_by;                        
         ssvc_put_data_row.SVC_ID := k_1;                                       
         --                                                                     
         ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;                
         p_ssvc_ctr := p_ssvc_ctr + 1;                                          
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_ID
', i_sub_svc_id, NULL, NULL, 'Success');                                        
                                                                                
                                                                                
         --PARM_ID=100115 for 'acct';SVC_ID=1                                   
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_100115;                              
         ss_parm_put_data_row.VAL := i_account_number;                          
         --                                                                     
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_100115, 'Success');                          
                                                                                
                                                                                
	  --PARM_ID= 80613 for 'first_name';SVC_ID=1                                   
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_80613;                               
         ss_parm_put_data_row.VAL := i_first_name;                              
                                                                                
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_80613, 'Success');                           
                                                                                
         --                                                                     
	 --PARM_ID= 80616 for 'net2phone_acct_created';SVC_ID=1                        
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_80616;                               
         if I_N2P_STATUS = 'A' OR I_N2P_STATUS = 'S' then                       
	 ss_parm_put_data_row.VAL := 'Y';                                              
	 else                                                                          
	 ss_parm_put_data_row.VAL := 'N';                                              
	 end if;                                                                       
                                                                                
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_80616, 'Success');                           
                                                                                
         --                                                                     
                                                                                
	 --PARM_ID= 80614 for 'last_name';SVC_ID=1                                     
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_80614;                               
         ss_parm_put_data_row.VAL := i_last_name;                               
                                                                                
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_80614, 'Success');                           
                                                                                
         --                                                                     
	 --PARM_ID= 80615 for 'home_phone_number';SVC_ID=1                             
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_80615;                               
         ss_parm_put_data_row.VAL := i_home_phone;                              
                                                                                
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_80615 , 'Success');                          
                                                                                
         --                                                                     
                                                                                
	--SUB_SVC_ADDR                                                                 
         ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                     
         --                                                                     
         ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;       
         p_ss_addr_ctr := p_ss_addr_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_ADDR', 'SUB_S
VC_ID', i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                  
                                                                                
                                                                                
	------------ISP Composed service                                               
	 SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;                       
                                                                                
         --SVC_ID=1, samp_sub                                                   
         ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                          
         ssvc_put_data_row.SUB_ID := i_sub_id;                                  
         ssvc_put_data_row.START_DT := k_created_dtm;                           
         ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id || '_isp_composed_'||i_a
ccount_number;                                                                  
                                                                                
         ssvc_put_data_row.SAMP_VER := 0;                                       
         if i_status is not null then                                           
	 ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                                    
	 else                                                                          
         ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                             
	 end if;                                                                       
         ssvc_put_data_row.CREATED_DTM := k_created_dtm;                        
         ssvc_put_data_row.CREATED_BY := k_created_by;                          
         ssvc_put_data_row.END_DT := NULL;                                      
         ssvc_put_data_row.PURCHASE_DT := NULL;                                 
         ssvc_put_data_row.PARENT_SUB_SVC_ID := NULL;                           
         ssvc_put_data_row.PRE_STATUS_ID := 33;                                 
         ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                      
         ssvc_put_data_row.MODIFIED_BY := k_modified_by;                        
         ssvc_put_data_row.SVC_ID := k_145;                                     
                                                                                
	 isp_composed_sub_svc_id := i_sub_svc_id;                                      
	 --                                                                            
                                                                                
         ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;                
         p_ssvc_ctr := p_ssvc_ctr + 1;                                          
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_ID
', i_sub_svc_id, NULL, NULL, 'Success');                                        
                                                                                
                                                                                
	 ---ISP control                                                                
                                                                                
	 SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;                       
                                                                                
         --SVC_ID=1, samp_sub                                                   
         ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                          
         ssvc_put_data_row.SUB_ID := i_sub_id;                                  
         ssvc_put_data_row.START_DT := k_created_dtm;                           
         ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id || '_isp_control_'||i_ac
count_number;                                                                   
                                                                                
         ssvc_put_data_row.SAMP_VER := 0;                                       
         if i_status is not null then                                           
	 ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                                    
	 else                                                                          
         ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                             
	 end if;                                                                       
         ssvc_put_data_row.CREATED_DTM := k_created_dtm;                        
         ssvc_put_data_row.CREATED_BY := k_created_by;                          
         ssvc_put_data_row.END_DT := NULL;                                      
         ssvc_put_data_row.PURCHASE_DT := NULL;                                 
         ssvc_put_data_row.PARENT_SUB_SVC_ID := isp_composed_sub_svc_id;        
         ssvc_put_data_row.PRE_STATUS_ID := 33;                                 
         ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                      
         ssvc_put_data_row.MODIFIED_BY := k_modified_by;                        
         ssvc_put_data_row.SVC_ID := k_134;                                     
                                                                                
         ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;                
         p_ssvc_ctr := p_ssvc_ctr + 1;                                          
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_ID
', i_sub_svc_id, NULL, NULL, 'Success');                                        
                                                                                
                                                                                
	--SUB_SVC_ADDR                                                                 
         ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                     
         --                                                                     
         ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;       
         p_ss_addr_ctr := p_ss_addr_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_ADDR', 'SUB_S
VC_ID', i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                  
                                                                                
                                                                                
	 --PARM_ID=81980 for 'maximum_number_of_logins';SVC_ID=134                     
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_81980;                               
	 if i_sub_typ_id = 1 then                                                      
         ss_parm_put_data_row.VAL := '6';                                       
	 else                                                                          
	 ss_parm_put_data_row.VAL := '25';                                             
	 end if;                                                                       
         --                                                                     
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_81980, 'Success');                           
                                                                                
                                                                                
         --PARM_ID=81981 for 'max_number_of_personal_webspace';SVC_ID=134       
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_81981;                               
          if i_sub_typ_id = 1 then                                              
         ss_parm_put_data_row.VAL := '6';                                       
	 else                                                                          
	 ss_parm_put_data_row.VAL := '25';                                             
	 end if;                                                                       
         --                                                                     
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_81981, 'Success');                           
                                                                                
                                                                                
                                                                                
         --PARM_ID=81986 for 'allowed_access';SVC_ID=134                        
         ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                       
         ss_parm_put_data_row.PARM_ID := k_81986;                               
	 ss_parm_put_data_row.VAL := 'Mail,WebMail,POP,IMAP,Relay,TLS,RADIUS';         
                                                                                
         --                                                                     
         ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_row;       
         p_ss_parm_ctr := p_ss_parm_ctr + 1;                                    
         --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PARM', 'SUB_S
VC_ID', i_sub_svc_id, 'PARM_ID', k_81986, 'Success');                           
                                                                                
                                                                                
         slog_put_data_row.RS_SUB_SVC_ADDR := 'Success -' || '[records: 3]';    
                                                                                
         RETURN i_sub_svc_id;                                                   
      END;                                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END insert_sub_svc_samp;                                                     
                                                                                
PROCEDURE load_constant_from_db                                                 
   IS                                                                           
   BEGIN                                                                        
                                                                                
       --k_101,k_121,k_106,k_107,k_109,k_113,k_115,k_119,k_122,k_123,k_117      
      SELECT svc_id INTO k_1 FROM SVC WHERE svc_nm = 'samp_sub';                
      SELECT svc_id INTO k_134 FROM SVC WHERE svc_nm = 'isp_control';           
      SELECT svc_id INTO k_145 FROM SVC WHERE svc_nm = 'isp_services_composed'; 
                                                                                
      SELECT svc_id INTO k_113 FROM SVC WHERE svc_nm = 'smp_emta_composed';     
      SELECT svc_id INTO k_177 FROM SVC WHERE svc_nm = 'emta_device_control';   
      SELECT svc_id INTO k_179 FROM SVC WHERE svc_nm = 'emta_data_port';        
      SELECT svc_id INTO k_178 FROM SVC WHERE svc_nm = 'emta_voice_port';       
      SELECT svc_id INTO k_175 FROM SVC WHERE svc_nm = 'smp_data_port';         
      SELECT svc_id INTO k_174 FROM SVC WHERE svc_nm = 'smp_resi_device_control'
;                                                                               
                                                                                
      SELECT svc_id INTO k_176 FROM SVC WHERE svc_nm = 'smp_resi_voice_port';   
                                                                                
      SELECT svc_id INTO k_126 FROM SVC WHERE svc_nm = 'smp_voice_line';        
      SELECT svc_id INTO k_122 FROM SVC WHERE svc_nm = 'smp_switch_dial_tone_acc
ess';                                                                           
                                                                                
      SELECT svc_id INTO k_128 FROM SVC WHERE svc_nm = 'smp_isp_control';       
                                                                                
                                                                                
                                                                                
      SELECT parm_id INTO k_100115 FROM PARM WHERE parm_nm = 'acct' AND object_i
d = k_1;                                                                        
                                                                                
      SELECT parm_id INTO k_81980 FROM PARM WHERE parm_nm = 'max_number_of_login
s' AND object_id = k_128;                                                       
                                                                                
      SELECT parm_id INTO k_81981 FROM PARM WHERE parm_nm = 'max_number_of_perso
nal_webspace' AND object_id = k_128;                                            
                                                                                
      SELECT parm_id INTO k_81986 FROM PARM WHERE parm_nm = 'allowed_access' AND
 object_id = k_128;                                                             
                                                                                
                                                                                
      SELECT parm_id INTO k_80613 FROM PARM WHERE parm_nm = 'first_name' AND obj
ect_id = k_1;                                                                   
                                                                                
      SELECT parm_id INTO k_80616 FROM PARM WHERE parm_nm = 'net2phone_acct_crea
ted' AND object_id = k_1;                                                       
                                                                                
      SELECT parm_id INTO k_80614 FROM PARM WHERE parm_nm = 'last_name' AND obje
ct_id = k_1;                                                                    
                                                                                
      SELECT parm_id INTO k_80615 FROM PARM WHERE parm_nm = 'home_phone_number' 
AND object_id = k_1;                                                            
                                                                                
      SELECT parm_id INTO k_84746 FROM PARM WHERE parm_nm = 'data_port_id' AND o
bject_id = k_175;                                                               
                                                                                
      SELECT parm_id INTO k_84669 FROM PARM WHERE parm_nm = 'device_id' AND obje
ct_id = k_174;                                                                  
                                                                                
      SELECT parm_id INTO k_84670 FROM PARM WHERE parm_nm = 'device_id2' AND obj
ect_id = k_174;                                                                 
                                                                                
      SELECT parm_id INTO k_84802 FROM PARM WHERE parm_nm = 'device_id' AND obje
ct_id = k_176;                                                                  
                                                                                
      SELECT parm_id INTO k_84798 FROM PARM WHERE parm_nm = 'port_number' AND ob
ject_id = k_176;                                                                
                                                                                
      SELECT parm_id INTO k_84804 FROM PARM WHERE parm_nm = 'device_nickname' AN
D object_id = k_176;                                                            
                                                                                
      SELECT parm_id INTO k_84691 FROM PARM WHERE parm_nm = 'num_of_voice_lines'
 AND object_id = k_174;                                                         
                                                                                
      SELECT parm_id INTO k_84803 FROM PARM WHERE parm_nm = 'num_of_voice_lines'
 AND object_id = k_176;                                                         
                                                                                
                                                                                
                                                                                
      SELECT parm_id INTO max_number_of_ia FROM PARM WHERE parm_nm = 'max_number
_of_internet_services' AND class_id = k_sub;                                    
                                                                                
      SELECT parm_id INTO max_number_of_vl FROM PARM WHERE parm_nm = 'max_number
_of_voice_lines' AND class_id = k_sub;                                          
                                                                                
                                                                                
      SELECT svc_delivery_plat_id INTO k_svc_dl_plat_id_hsd_sip                 
        FROM REF_SVC_DELIVERY_PLAT                                              
       WHERE svc_delivery_plat_nm = 'resi_sip'                                  
         AND ROWNUM < 2;                                                        
                                                                                
       SELECT svc_delivery_plat_id INTO k_svc_dl_plat_id_resi_data              
        FROM REF_SVC_DELIVERY_PLAT                                              
       WHERE svc_delivery_plat_nm = 'resi_data'                                 
         AND ROWNUM < 2;                                                        
                                                                                
      SELECT svc_delivery_plat_id INTO k_svc_dl_plat_id_voip                    
        FROM REF_SVC_DELIVERY_PLAT                                              
       WHERE svc_delivery_plat_nm = 'voip'                                      
         AND ROWNUM < 2;                                                        
                                                                                
      SELECT ntwk_role_id INTO k_ntwk_role_nep FROM REF_NTWK_ROLE WHERE ntwk_rol
e_nm = 'network_entry_point';                                                   
                                                                                
      SELECT ntwk_role_id INTO k_ntwk_role_call_server FROM REF_NTWK_ROLE WHERE 
ntwk_role_nm = 'call_server';                                                   
                                                                                
      SELECT ntwk_role_id INTO k_ntwk_role_nam FROM REF_NTWK_ROLE WHERE ntwk_rol
e_nm = 'network_access_manager';                                                
                                                                                
                                                                                
      --OPEN CURSORS                                                            
      OPEN svc_ids;                                                             
      FETCH svc_ids BULK COLLECT INTO ssvc_get_data_record;                     
      CLOSE svc_ids;                                                            
                                                                                
      OPEN svcemta_parm_ids;                                                    
      FETCH svcemta_parm_ids BULK COLLECT INTO ssemta_parm_get_data_record;     
      CLOSE svcemta_parm_ids;                                                   
                                                                                
      OPEN svcdt_parm_ids;                                                      
      FETCH svcdt_parm_ids BULK COLLECT INTO ssdt_parm_get_data_record;         
      CLOSE svcdt_parm_ids;                                                     
                                                                                
      OPEN svcemtadataport_parm_ids;                                            
      FETCH svcemtadataport_parm_ids BULK COLLECT INTO ssemtadp_parm_get_data_re
cord;                                                                           
                                                                                
      CLOSE svcemtadataport_parm_ids;                                           
                                                                                
      OPEN svcvp_parm_ids;                                                      
      FETCH svcvp_parm_ids BULK COLLECT INTO ssvp_parm_get_data_record;         
      CLOSE svcvp_parm_ids;                                                     
                                                                                
                                                                                
 EXCEPTION                                                                      
        WHEN OTHERS THEN                                                        
           RETURN;                                                              
   END load_constant_from_db;                                                   
                                                                                
FUNCTION insert_location (                                                      
      i_account_number  IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,               
      i_sub_id          IN      SUB.SUB_ID%TYPE,                                
      i_external_key    IN      VARCHAR2,                                       
      k_created_dtm     IN      DATE                                            
   )                                                                            
   RETURN NUMBER                                                                
   IS                                                                           
      i_location_id             LOCATION.LOCATION_ID%TYPE;                      
   BEGIN                                                                        
      SELECT location_seq.NEXTVAL INTO i_location_id FROM dual;                 
                                                                                
      loc_put_data_row.LOCATION_ID := i_location_id;                            
      loc_put_data_row.LOCATION_NM := NULL;                                     
      loc_put_data_row.EXTERNAL_KEY := NULL;   --??                             
      loc_put_data_row.CREATED_DTM := k_created_dtm;                            
      loc_put_data_row.CREATED_BY := k_created_by;                              
      loc_put_data_row.MODIFIED_DTM := k_modified_dtm;                          
      loc_put_data_row.MODIFIED_BY := k_modified_by;                            
                                                                                
      loc_put_data_record (p_loc_ctr) := loc_put_data_row;                      
      p_loc_ctr := p_loc_ctr + 1;                                               
      --insert_sub_logical(i_account_number, i_sub_id, 'LOCATION', 'LOCATION_ID'
, i_location_id, NULL, NULL, 'Success');                                        
                                                                                
                                                                                
      RETURN i_location_id;                                                     
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END insert_location;                                                         
                                                                                
PROCEDURE insert_voice(                                                         
     i_run_cycle      IN  NUMBER                                                
   )                                                                            
   IS                                                                           
   BEGIN                                                                        
                                                                                
      DECLARE                                                                   
         CURSOR sub_data IS                                                     
            SELECT *                                                            
              FROM DM_VOICE_SUB                                                 
             WHERE sub_done = 'N'                                               
               AND run_cycle = i_run_cycle;                                     
                                                                                
                                                                                
	i_rows                 NATURAL := 1000;                                        
                                                                                
        TYPE sub_get_tbl       IS TABLE OF sub_data%ROWTYPE INDEX BY BINARY_INTE
GER;                                                                            
                                                                                
        sub_get_data_record    sub_get_tbl;                                     
        sub_get_data_row       sub_data%ROWTYPE;                                
         --                                                                     
                                                                                
                                                                                
         i_account_number       DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE;               
	 i_head_end                  DM_V_SUBSCRIBER_DETAILS.HEAD_END%TYPE;            
	 i_bridger_node            DM_V_SUBSCRIBER_DETAILS.BRIDGER_NODE%TYPE;          
         i_STATUS                     DM_V_SUBSCRIBER_DETAILS.STATUS%TYPE;      
	 I_N2P_STATUS             DM_V_N2P_STATUS.N2P_STATUS%TYPE;                     
                                                                                
         i_location_id               LOCATION.LOCATION_ID%TYPE;                 
         i_sub_id                      SUB.SUB_ID%TYPE;                         
         i_sub_svc_id               SUB_SVC.SUB_SVC_ID%TYPE;                    
	 i_samp_sub_svc_id    SUB_SVC.SUB_SVC_ID%TYPE;                                 
         i_sub_addr_id_pri       SUB_ADDR.SUB_ADDR_ID%TYPE;                     
         --i_sub_addr_id_hsd   SUB_ADDR.SUB_ADDR_ID%TYPE;                       
         i_first_row                   NUMBER(10);                              
         i_last_row                   NUMBER(10);                               
         i_mod                          NUMBER(10);                             
                                                                                
	 i_sub_parm_id            SUB_PARM.SUB_ID%TYPE;                                
	 i_contact_id                SUB_CONTACT.SUB_CONTACT_ID%TYPE;                  
	 --i_cm_mac                 DM_VOICE_CM.cm_mac%TYPE;                           
	 i_prereq_sub_svc_id  SUB_SVC_PARM_DEPY.PREREQ_SUB_SVC_ID%TYPE;                
	 hsd_sub_svc               slog_put_data_row.RS_SUB_SVC%TYPE := 'Failure';     
	 video_sub_svc            slog_put_data_row.RS_SUB_SVC%TYPE := 'Failure';      
         smp_sub_id                 NUMBER(10) := 0;                            
	 smp_sub_id2               NUMBER(10) := 0;                                    
	 smp_sub_addr_id        NUMBER(10) := 0;                                       
                                                                                
	 dt_sub_svc_id             SUB_SVC.SUB_SVC_ID%TYPE:=0;                         
	 vp_sub_svc_id             SUB_SVC.SUB_SVC_ID%TYPE:=0;                         
                                                                                
	 global_mta_mac        DM_DIAL_TONE.mta_mac%type := null;                      
         flag_mta_mac               varchar2(255):= 'false';                    
	 MAX_NUM_OF_IA         varchar2(255);                                          
	 MAX_NUM_OF_VL	       varchar2(255);                                           
	 MAX_NUM_OF_IA_db   varchar2(255);                                             
	 MAX_NUM_OF_VL_db  varchar2(255);                                              
	 dt_has_euip                  REF_ASSOC_TYP.ASSOC_TYP_ID%TYPE;                 
                                                                                
        C_list                         varchar2(4000);                          
        C_idx                          PLS_INTEGER;                             
                                                                                
       BEGIN                                                                    
            DBMS_OUTPUT.ENABLE(10000000);                                       
            -- Set application info to be viewed from other sessions for long ru
nning processes                                                                 
                                                                                
            dbms_application_info.set_action(NULL);                             
            dbms_application_info.set_module(NULL, NULL);                       
                                                                                
           dbms_application_info.set_module(module_name => 'Bresnan_Voice_DM wit
h i_rows : ' || i_rows,                                                         
                                                                                
           action_name => '1-Get subs list for Run Cycle');                     
                                                                                
           load_constant_from_db;                                               
           i_first_row := 0;                                                    
           i_last_row := 0;                                                     
                                                                                
           OPEN sub_data;                                                       
           --LOOP                                                               
           dbms_application_info.set_action(action_name => '2-Fetching ' || i_ro
ws);                                                                            
                                                                                
           FETCH sub_data BULK COLLECT INTO sub_get_data_record LIMIT i_rows;   
           WHILE (sub_get_data_record.COUNT > 0)                                
           LOOP                                                                 
                                                                                
                i_first_row := i_last_row + sub_get_data_record.FIRST;          
                i_last_row := i_last_row + sub_get_data_record.LAST;            
                                                                                
                --Initialize Counters                                           
                                                                                
                p_slog_ctr := 1;                                                
                p_sent_ctr := 1;                                                
                p_sd_account_number := 1;                                       
                p_sub_ctr := 1;                                                 
                p_sparm_ctr := 1;                                               
                p_loc_ctr := 1;                                                 
		p_locd_ctr := 1;                                                              
                p_saddr_ctr := 1;                                               
                p_scont_ctr := 1;                                               
		p_sctparm_ctr := 1;                                                           
                p_ssvc_ctr := 1;                                                
		p_ss_parm_ctr := 1;                                                           
		p_ss_addr_ctr := 1;                                                           
                /*p_ss_depy_ctr := 1;                                           
                p_ssp_depy_ctr := 1;*/                                          
                p_ssn_ctr := 1;                                                 
                p_ssd_plat_ctr := 1;                                            
		p_dtss_parm_ctr := 1;                                                         
		p_vpss_parm_ctr := 1;                                                         
		p_ss_assoc_ctr := 1;                                                          
                                                                                
                                                                                
                -- Set application info to be viewed from other sessions for lon
g running processes                                                             
                                                                                
                dbms_application_info.set_client_info('Processing subscribers ' 
|| i_first_row ||                                                               
                                                                                
                                                      ' thru ' || i_last_row || 
' for Run Cycle : ' || i_run_cycle);                                            
                                                                                
                dbms_application_info.set_action('3-Subscribers from 1 to 100');
                                                                                
                                                                                
                                                                                
                FOR i IN sub_get_data_record.FIRST..sub_get_data_record.LAST    
                LOOP                                                            
		        --these counts would be actual array counts + 1                       
                        --while deleting count + 1 -TO- last would be deleted.  
                        old_p_sub_ctr := p_sub_ctr;                             
                        old_p_sparm_ctr := p_sparm_ctr;                         
                        old_p_loc_ctr := p_loc_ctr;                             
			old_p_locd_ctr:= p_locd_ctr;                                                 
                        old_p_saddr_ctr := p_saddr_ctr;                         
                        old_p_scont_ctr := p_scont_ctr;                         
			old_p_sctparm_ctr := p_sctparm_ctr;                                          
                        old_p_ssvc_ctr := p_ssvc_ctr;                           
			old_p_ss_parm_ctr := p_ss_parm_ctr;                                          
			old_p_ss_addr_ctr := p_ss_addr_ctr;                                          
                       /* old_p_ss_depy_ctr := p_ss_depy_ctr;                   
                        old_p_ssp_depy_ctr := p_ssp_depy_ctr;*/                 
                        old_p_ssn_ctr :=  p_ssn_ctr;                            
                        old_p_ssd_plat_ctr :=  p_ssd_plat_ctr;                  
			old_p_dtss_parm_ctr:=  p_dtss_parm_ctr;                                      
			old_p_vpss_parm_ctr:=  p_vpss_parm_ctr;                                      
		        old_p_ss_assoc_ctr := p_ss_assoc_ctr;                                 
                                                                                
                        i_mod := MOD(i,100);                                    
                        IF i_mod = 0 THEN                                       
                           i_mod := i + 1;                                      
                           dbms_application_info.set_action('4-Subscribers from 
' || TO_CHAR(i_mod));                                                           
                                                                                
                        END IF;                                                 
                        sub_get_data_row := sub_get_data_record (i);            
                                                                                
                        k_created_dtm := SYSDATE;  --To track the logical insert
 datetime of Subscriber entity                                                  
                                                                                
                        i_account_number := sub_get_data_row.ACCOUNT_NUMBER;    
                                                                                
		BEGIN                                                                         
			select HEAD_END into i_head_end from DM_V_SUBSCRIBER_DETAILS where ACCOUNT_NU
MBER = i_account_number;                                                        
                                                                                
		 EXCEPTION WHEN OTHERS THEN                                                   
                   NULL;                                                        
                 END;                                                           
                                                                                
		 BEGIN                                                                        
			select BRIDGER_NODE into i_bridger_node from DM_V_SUBSCRIBER_DETAILS where AC
COUNT_NUMBER = i_account_number;                                                
                                                                                
		 EXCEPTION WHEN OTHERS THEN                                                   
                   NULL;                                                        
                 END;                                                           
                                                                                
		 BEGIN                                                                        
		    select STATUS into i_STATUS from DM_V_SUBSCRIBER_DETAILS where ACCOUNT_NUM
BER = i_account_number;                                                         
                                                                                
		 EXCEPTION WHEN NO_DATA_FOUND THEN                                            
                   NULL;                                                        
                 END;                                                           
                                                                                
      		 BEGIN                                                                  
			  select sub_id into smp_sub_id from sub where external_key = i_account_numbe
r;                                                                              
                                                                                
		 EXCEPTION WHEN NO_DATA_FOUND THEN                                            
                  NULL;                                                         
                 END;                                                           
                                                                                
		 BEGIN                                                                        
		    select sub_addr_id into smp_sub_addr_id from sub_addr where sub_id = smp_s
ub_id;                                                                          
                                                                                
		 EXCEPTION WHEN NO_DATA_FOUND THEN                                            
                   NULL;                                                        
                 END;                                                           
                                                                                
                        --Populate SUB record                                   
                                                                                
			--DBMS_OUTPUT.PUT_LINE('Making entries of subscriber related tables');       
                                                                                
			slog_put_data_row.SUB_ID := smp_sub_id;                                      
                        slog_put_data_row.account_number := sub_get_data_row.ACC
OUNT_NUMBER;                                                                    
                                                                                
                                                                                
			if smp_sub_id = 0 then                                                       
                                                                                
                        SELECT sub_seq.NEXTVAL INTO i_sub_id FROM dual;         
                        sub_put_data_row.SUB_ID := i_sub_id;                    
                                                                                
			if i_STATUS is not null then                                                 
                        sub_put_data_row.SUB_STATUS_ID := get_sub_status_id('mso
_block');                                                                       
                                                                                
			else                                                                         
			sub_put_data_row.SUB_STATUS_ID := get_sub_status_id('active');               
			end if;                                                                      
                                                                                
			if substr(i_bridger_node,1,4) = '8313' then                                  
                        sub_put_data_row.SUB_TYP_ID := 1;                       
			else                                                                         
			sub_put_data_row.SUB_TYP_ID := 4;                                            
			end if;                                                                      
                                                                                
                        sub_put_data_row.SVC_PROVIDER_ID := 1;                  
                        sub_put_data_row.SAMP_VER := 0;                         
                        sub_put_data_row.EXTERNAL_KEY := i_account_number;      
                        sub_put_data_row.LOCALE_CD := 'en_CA';                  
                        sub_put_data_row.CREATED_DTM := k_created_dtm;          
                        sub_put_data_row.CREATED_BY := k_created_by;            
                        sub_put_data_row.PARENT_SUB_ID := NULL;                 
                        sub_put_data_row.PRE_STATUS_ID := 13;                   
                        sub_put_data_row.MODIFIED_DTM := k_modified_dtm;        
                        sub_put_data_row.MODIFIED_BY := k_modified_by;          
                        --                                                      
                        sub_put_data_record (p_sub_ctr) := sub_put_data_row;    
                        p_sub_ctr := p_sub_ctr+1;                               
                                                                                
			--                                                                           
                        IF k_debug = 'Y' THEN                                   
                           DBMS_OUTPUT.PUT_LINE('-------------------------------
-------------------------------');                                              
                                                                                
                           DBMS_OUTPUT.PUT_LINE('Insert_Sub:: [' || TO_CHAR(SYSD
ATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                         
                                                                                
                                             || ' account_number: ' || sub_get_d
ata_row.ACCOUNT_NUMBER                                                          
                                                                                
                                             || ' Sub-ID: ' || sub_put_data_row.
SUB_ID                                                                          
                                                                                
                                             || ' p_sub_ctr:' || p_sub_ctr);    
                           DBMS_OUTPUT.PUT_LINE('SUB RECORD: ' || 'sub-id :' || 
sub_put_data_row.SUB_ID || ' sub-status-id :' ||                                
                                                                                
                                            sub_put_data_row.SUB_STATUS_ID || ' 
sub-typ-id :' || sub_put_data_row.SUB_TYP_ID ||                                 
                                                                                
                                            ' ext-key :' || sub_put_data_row.EXT
ERNAL_KEY);                                                                     
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
                                                                                
			--DM_VOICE_SUB_LOGICAL                                                       
                        --insert_sub_logical(sub_get_data_row.ACCOUNT_NUMBER, i_
sub_id, 'SUB', 'SUB_ID', i_sub_id, NULL, NULL, 'Success');                      
                                                                                
                                                                                
                                                                                
			--DM_VOICE_SUB_LOG                                                           
                        slog_put_data_row.SUB_ID := i_sub_id;                   
                        slog_put_data_row.account_number := sub_get_data_row.ACC
OUNT_NUMBER;                                                                    
                                                                                
                        slog_put_data_row.RS_SUB := 'Success';                  
                                                                                
                        --Set these status in respective procedures/functions   
                        slog_put_data_row.RS_SUB_PARM := NULL;                  
                        slog_put_data_row.RS_SUB_ADDRESS := NULL;               
                        slog_put_data_row.RS_SUB_CONTACT := NULL;               
                        slog_put_data_row.RS_SUB_LOCATION := NULL;              
                        slog_put_data_row.RS_SUB_SVC := NULL;                   
                        slog_put_data_row.RS_SUB_SVC_DEPY := NULL;              
                        slog_put_data_row.RS_SUB_SVC_PARM := NULL;              
                        slog_put_data_row.RS_SUB_SVC_PARM_DEPY := NULL;         
                        slog_put_data_row.RS_SUB_SVC_ADDR := NULL;              
                        slog_put_data_row.RS_SUB_SVC_NTWK := NULL;              
                        slog_put_data_row.RS_SUB_SVC_DLVY_PLAT := NULL;         
                                                                                
			BEGIN                                                                        
                        SELECT MAX(HSD_INSTANCE) , MAX(VOICE_INSTANCE) into MAX_
NUM_OF_IA  , MAX_NUM_OF_VL                                                      
                                                                                
			FROM DM_EMTA_SERVICE_CODES SC , DM_EMTA_DEVICE_CONTROL CDC                   
			WHERE SC.PACKAGE_ID = CDC.PACKAGE_ID                                         
			     AND CDC.ACCOUNT_NUMBER = i_account_number;                              
                        EXCEPTION WHEN OTHERS THEN                              
			NULL;                                                                        
			END;                                                                         
                                                                                
			BEGIN                                                                        
                        SELECT N2P_STATUS  into I_N2P_STATUS                    
			FROM DM_V_N2P_STATUS NP                                                      
			WHERE NP.ACCOUNT_NUMBER = i_account_number;                                  
                                                                                
                        EXCEPTION WHEN OTHERS THEN                              
			NULL;                                                                        
			END;                                                                         
                                                                                
			slog_put_data_row.RS_SUB_PARM := insert_sub_parm(i_account_number,           
			                                                                             
             'active',                                                          
                                                                                
														  MAX_NUM_OF_IA,                                                  
					  							                  MAX_NUM_OF_VL,                                  
									                                          i_sub_id,                    
														  I_N2P_STATUS);                                                  
			 --                                                                          
                        IF k_debug = 'Y' THEN                                   
                                DBMS_OUTPUT.PUT_LINE('Insert_SubParm:: [' || TO_
CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' Status : ' || slog_put_da
ta_row.RS_SUB_PARM);                                                            
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
			i_location_id := insert_location(i_account_number,  i_sub_id, 'primary', k_cr
eated_dtm);                                                                     
                                                                                
                                                                                
			IF i_location_id != 0 THEN                                                   
                                slog_put_data_row.RS_SUB_LOCATION := 'Success'; 
                        END IF;                                                 
                                                                                
			 --                                                                          
                        IF k_debug = 'Y' THEN                                   
                                DBMS_OUTPUT.PUT_LINE('Insert_Location:: [' || TO
_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                               
                                                                                
                                                  || ' LocationId :' || i_locati
on_id                                                                           
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' Status : ' || slog_put_da
ta_row.RS_SUB_LOCATION);                                                        
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
			--Call SUB_ADDR (Calls LOCATION_DTL)                                         
                        i_sub_addr_id_pri := insert_sub_address(i_account_number
,                                                                               
                                                                                
                                                                i_sub_id,       
                                                                i_location_id,  
                                                                'primary',      
                                                                sub_get_data_row
.street_name,                                                                   
                                                                                
                                                                sub_get_data_row
.city,                                                                          
                                                                                
                                                                sub_get_data_row
.state,                                                                         
                                                                                
                                                                sub_get_data_row
.zipcode,                                                                       
                                                                                
                                                                 i_head_end,    
								i_bridger_node,                                                         
                                                                'service',      
                                                                k_created_dtm); 
                        --                                                      
                        IF k_debug = 'Y' THEN                                   
                                DBMS_OUTPUT.PUT_LINE('Insert_SubAddr:: [' || TO_
CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                
                                                                                
                                                  || ' SubAddrId :' || i_sub_add
r_id_pri                                                                        
                                                                                
                                                  || ' LocationId :' || i_locati
on_id                                                                           
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' Status : ' || slog_put_da
ta_row.RS_SUB_ADDRESS);                                                         
                                                                                
                        END IF;                                                 
                        --                                                      
                         slog_put_data_row.RS_SUB_CONTACT := insert_sub_contact(
i_account_number,                                                               
                                                                                
                                                           i_sub_id,            
                                                           i_location_id,       
							   sub_get_data_row.first_name,                                          
							   sub_get_data_row.last_name,                                           
							   sub_get_data_row.HOME_PHONE,                                          
							   '',                                                                   
                                                           k_created_dtm);      
                                                                                
			--                                                                           
                        IF k_debug = 'Y' THEN                                   
                                DBMS_OUTPUT.PUT_LINE('Insert_SubSvc(with SubSvcD
epy, SubSvcParm, SubSvcParmDepy:: ['                                            
                                                                                
                                                  || TO_CHAR(SYSDATE,'DD-MON-YYY
Y HH24:MI:SS:RR') || ']'                                                        
                                                                                
                                                  || ' SubSvcId: ' || i_sub_svc_
id                                                                              
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' Status : ' || slog_put_da
ta_row.RS_SUB_CONTACT);                                                         
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
                                                                                
                                                                                
			i_samp_sub_svc_id := insert_sub_svc_samp(i_account_number,                   
			                                    i_sub_id,                                
                                                            i_sub_addr_id_pri,  
                                                            k_created_dtm,      
							    sub_put_data_row.SUB_TYP_ID,                                         
							    sub_get_data_row.first_name,                                         
							    sub_get_data_row.last_name,                                          
							    sub_get_data_row.HOME_PHONE,                                         
							    i_STATUS,                                                            
							    I_N2P_STATUS                                                         
                                                           );                   
                        --                                                      
                        IF k_debug = 'Y' THEN                                   
                                DBMS_OUTPUT.PUT_LINE('Insert_SubSvcSamp:: [' || 
TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                             
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' SubSvcId(samp): ' || i_sa
mp_sub_svc_id);                                                                 
                                                                                
                        END IF;                                                 
			I_N2P_STATUS := null;                                                        
                       else                                                     
                                                                                
			BEGIN                                                                        
                        SELECT MAX(HSD_INSTANCE) , MAX(VOICE_INSTANCE) into MAX_
NUM_OF_IA  , MAX_NUM_OF_VL                                                      
                                                                                
			FROM DM_EMTA_SERVICE_CODES SC , DM_EMTA_DEVICE_CONTROL CDC                   
			WHERE SC.PACKAGE_ID = CDC.PACKAGE_ID                                         
			     AND CDC.ACCOUNT_NUMBER = i_account_number;                              
                        EXCEPTION WHEN OTHERS THEN                              
			NULL;                                                                        
			END;                                                                         
                                                                                
                        BEGIN                                                   
			select val into MAX_NUM_OF_IA_db from sub_parm where sub_id = smp_sub_id and 
parm_id = max_number_of_ia;                                                     
                                                                                
			EXCEPTION WHEN OTHERS THEN                                                   
			NULL;                                                                        
			END;                                                                         
			BEGIN                                                                        
			select val into MAX_NUM_OF_VL_db from sub_parm where sub_id = smp_sub_id and 
parm_id = max_number_of_vl;                                                     
                                                                                
                        EXCEPTION WHEN OTHERS THEN                              
			NULL;                                                                        
			END;                                                                         
                        if  to_number(MAX_NUM_OF_IA) >  to_number(MAX_NUM_OF_IA_
db) then                                                                        
                                                                                
                        update sub_parm set val= MAX_NUM_OF_IA where sub_id = sm
p_sub_id and parm_id = max_number_of_ia;                                        
                                                                                
 			end if;                                                                     
			if  to_number(MAX_NUM_OF_VL) >  to_number(MAX_NUM_OF_VL_db) then             
                        update sub_parm set val= MAX_NUM_OF_VL where sub_id = sm
p_sub_id and parm_id = max_number_of_vl;                                        
                                                                                
 			end if;                                                                     
			end if;                                                                      
                                                                                
		      for c in(SELECT EDC.account_number , DT.TELEPHONE_NUMBER   , EDC.mta_mac
 FROM DM_EMTA_DEVICE_CONTROL EDC , DM_DIAL_TONE DT                              
                                                                                
			         WHERE EDC.MTA_MAC = DT.MTA_MAC (+)                                  
				     AND  EDC.account_number = i_account_number) loop                       
                                                                                
				if lower(global_mta_mac) = lower(c.mta_mac) then                            
			           flag_mta_mac := 'true';                                           
				 else                                                                       
			           flag_mta_mac := 'false';                                          
			         end if;                                                             
			         global_mta_mac := c.mta_mac;                                        
                                                                                
		         if smp_sub_id != 0 then                                              
                                slog_put_data_row.RS_SUB_SVC := insert_sub_svc(i
_account_number,                                                                
                                                                                
                                                             smp_sub_id,        
                                                             smp_sub_addr_id,   
							     i_head_end,                                                         
							     i_bridger_node,                                                     
                                                             k_created_dtm,     
					                     c.TELEPHONE_NUMBER,                                   
							     flag_mta_mac,                                                       
							     c.mta_mac);                                                         
                        else                                                    
		                slog_put_data_row.RS_SUB_SVC := insert_sub_svc(i_account_numbe
r,                                                                              
                                                                                
                                                             i_sub_id,          
                                                             i_sub_addr_id_pri, 
							     i_head_end,                                                         
							     i_bridger_node,                                                     
                                                             k_created_dtm,     
					                     c.TELEPHONE_NUMBER,                                   
							     flag_mta_mac,                                                       
							     c.mta_mac);                                                         
                        end if;                                                 
                                                                                
                   end loop;                                                    
                                                                                
                    IF k_debug = 'Y' THEN                                       
                                DBMS_OUTPUT.PUT_LINE('Insert_SubSvc:: [' || TO_C
HAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                 
                                                                                
                                                  || ' account_number: ' || i_ac
count_number                                                                    
                                                                                
                                                  || ' SubId: ' || i_sub_id     
                                                  || ' SubSvcStatus: ' || slog_p
ut_data_row.RS_SUB_SVC);                                                        
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
		        if smp_sub_id != 0 then                                               
                          slog_put_data_row.RS_SUB_PARM := 'Success';           
			  slog_put_data_row.RS_SUB_ADDRESS := 'Success';                             
			  slog_put_data_row.RS_SUB_CONTACT := 'Success';                             
			  slog_put_data_row.RS_SUB := 'Success';                                     
			  slog_put_data_row.RS_SUB_LOCATION := 'Success';                            
			  slog_put_data_row.RS_SUB_SVC_ADDR := 'Success';                            
			  sd_account_number_t(p_sd_account_number) := sub_get_data_row.ACCOUNT_NUMBER
;                                                                               
                                                                                
                          p_sd_account_number := p_sd_account_number+1;         
                       else                                                     
			IF substr(slog_put_data_row.RS_SUB_PARM,1,7) = 'Success' AND                 
                           substr(slog_put_data_row.RS_SUB_ADDRESS,1,7) = 'Succe
ss' AND                                                                         
                                                                                
                           substr(slog_put_data_row.RS_SUB_CONTACT,1,7) = 'Succe
ss' AND                                                                         
                                                                                
                           substr(slog_put_data_row.RS_SUB_SVC,1,7) = 'Success' 
AND                                                                             
                                                                                
                           i_samp_sub_svc_id IS NOT NULL THEN                   
                                slog_put_data_row.RS_SUB := 'Success';          
                                sd_account_number_t(p_sd_account_number) := sub_
get_data_row.ACCOUNT_NUMBER;                                                    
                                                                                
                                p_sd_account_number := p_sd_account_number+1;   
                        ELSE                                                    
                                slog_put_data_row.RS_SUB := 'Failure';          
				trim_failed_subs_data;                                                      
                            FOR p_sent_ctr IN 1..sent_put_data_record.count     
                                LOOP                                            
                                    sent_put_data_row := sent_put_data_record (p
_sent_ctr);                                                                     
                                                                                
                                    IF sent_put_data_row.SUB_ID = slog_put_data_
row.SUB_ID THEN                                                                 
                                                                                
                                        sent_put_data_record (p_sent_ctr).SUB_ST
ATUS := 'Failure';                                                              
                                                                                
                                    END IF;                                     
                                END LOOP;                                       
                        END IF;                                                 
                      END IF;                                                   
                        smp_sub_id2 := smp_sub_id;                              
		        smp_sub_id         := 0;                                              
                        smp_sub_addr_id   := 0;                                 
                                                                                
                        IF k_debug = 'Y' THEN                                   
                             dbms_output.put_line('Status::' || 'SUB: ' || subst
r(slog_put_data_row.RS_SUB,1,7)                                                 
                                                                                
                                                || ' SUB-PARM: ' || substr(slog_
put_data_row.RS_SUB_PARM,1,7)                                                   
                                                                                
                                                || ' SUB-ADDRESS: ' || substr(sl
og_put_data_row.RS_SUB_ADDRESS,1,7)                                             
                                                                                
                                                || ' SUB-CONTACT: ' || substr(sl
og_put_data_row.RS_SUB_CONTACT,1,7)                                             
                                                                                
                                                || ' SUB-SVC: ' || substr(slog_p
ut_data_row.RS_SUB_SVC,1,7)                                                     
                                                                                
                                                || ' i_sub_svc_id: ' || i_samp_s
ub_svc_id);                                                                     
                                                                                
                        END IF;                                                 
                        --                                                      
                                                                                
                        slog_put_data_record (p_slog_ctr) := slog_put_data_row; 
                        p_slog_ctr := p_slog_ctr+1;                             
                                                                                
                       --                                                       
                        IF k_debug = 'Y' THEN                                   
                                dbms_output.put_line('DM_VOICE_SUB_LOG RECORD (1
): '                                                                            
                                                                                
                                            || '[' || slog_put_data_row.SUB_ID |
| ']'                                                                           
                                                                                
                                            || '[' || slog_put_data_row.account_
number || ']'                                                                   
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB |
| ']'                                                                           
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_P
ARM || ']'                                                                      
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_A
DDRESS || ']');                                                                 
                                                                                
                                dbms_output.put_line('DM_VOICE_SUB_LOG RECORD (2
): '                                                                            
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_C
ONTACT || ']'                                                                   
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_L
OCATION || ']');                                                                
                                                                                
                                dbms_output.put_line('DM_VOICE_SUB_LOG RECORD (3
): '                                                                            
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_S
VC || ']'                                                                       
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_S
VC_DEPY || ']'                                                                  
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_S
VC_PARM || ']'                                                                  
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_S
VC_PARM_DEPY || ']'                                                             
                                                                                
                                            || '[' || slog_put_data_row.RS_SUB_S
VC_ADDR || ']');                                                                
                                                                                
                        END IF;                                                 
                                                                                
                       END LOOP;                                                
                                                                                
		       dbms_application_info.set_action(action_name => '5-bulk-insert DM_VOICE
_SUB_LOG');                                                                     
                                                                                
                       IF k_debug = 'Y' THEN                                    
                        DBMS_OUTPUT.PUT_LINE('[' || TO_CHAR(SYSDATE,'DD-MON-YYYY
 HH24:MI:SS:RR') || ']' ||                                                      
                                                                                
                                          'Running bulk-insert DM_VOICE_SUB_LOG'
);                                                                              
                                                                                
                        END IF;                                                 
                       --                                                       
                                                                                
                      --Bulk-Insert of DM_VOICE_SUB_LOG                         
                       FORALL p_slog_ctr IN 1..slog_put_data_record.COUNT       
                       INSERT INTO DM_VOICE_SUB_LOG                             
                       VALUES slog_put_data_record (p_slog_ctr);                
                                                                                
                        slog_put_data_record.DELETE;                            
                                                                                
                       dbms_application_info.set_action(action_name => '6-bulk-i
nsert DM_VOICE_SUB_LOGICAL');                                                   
                                                                                
                       IF k_debug = 'Y' THEN                                    
                        DBMS_OUTPUT.PUT_LINE('[' || TO_CHAR(SYSDATE,'DD-MON-YYYY
 HH24:MI:SS:RR') || ']' ||                                                      
                                                                                
                                          'Running bulk-insert DM_VOICE_SUB_LOGI
CAL');                                                                          
                                                                                
                        END IF;                                                 
                                                                                
                       FORALL p_sent_ctr IN 1..sent_put_data_record.COUNT       
                       INSERT INTO DM_VOICE_SUB_LOGICAL                         
                       VALUES sent_put_data_record (p_sent_ctr);                
                                                                                
                       sent_put_data_record.DELETE;                             
                        --                                                      
                                                                                
                                                                                
                                                                                
		       IF k_debug = 'Y' THEN                                                  
                       DBMS_OUTPUT.PUT_LINE('[' || TO_CHAR(SYSDATE,'DD-MON-YYYY 
HH24:MI:SS:RR') || ']' ||                                                       
                                                                                
                                        'Running <<insert_bulk_data>>');        
                       END IF;                                                  
                    insert_bulk_data;                                           
		--COMMIT;                                                                     
                --global_cm_mac := null;                                        
                                                                                
                                                                                
                EXIT WHEN sub_data%NOTFOUND;                                    
                FETCH sub_data BULK COLLECT INTO sub_get_data_record LIMIT i_row
s;                                                                              
                                                                                
           END LOOP;                                                            
                                                                                
           IF sub_data%ISOPEN THEN                                              
                CLOSE sub_data;                                                 
           END IF;                                                              
           ssvc_get_data_record.DELETE;                                         
	   ssemta_parm_get_data_record.DELETE;                                         
	   ssdt_parm_get_data_record.DELETE;                                           
	   ssemtadp_parm_get_data_record.DELETE;                                       
	   ssvp_parm_get_data_record.DELETE;                                           
   END;                                                                         
   EXCEPTION                                                                    
        WHEN OTHERS THEN                                                        
             dbms_output.put_line('insert sub and cm'||SUBSTR(SQLERRM,0,200));  
             RETURN;                                                            
         --DBMS_OUTPUT.PUT_LINE('HOT Voice Data Migration Ended ' || TO_CHAR(SYS
DATE, 'yyyy-mm-dd hh24:mi:ss'));                                                
                                                                                
 END insert_voice;                                                              
                                                                                
FUNCTION insert_sub_svc (                                                       
      i_account_number             IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,    
      i_sub_id                             IN      SUB.SUB_ID%TYPE,             
      i_sub_addr_id                    IN      SUB_SVC_ADDR.SUB_ADDR_ID%TYPE,   
      i_head_end                        IN      DM_V_SUBSCRIBER_DETAILS.head_end
%TYPE,                                                                          
                                                                                
      i_bridger_node                   IN      DM_V_SUBSCRIBER_DETAILS.bridger_n
ode%TYPE,                                                                       
                                                                                
      k_created_dtm                   IN      DATE,                             
      i_telephone_number         IN       DM_DIAL_TONE.telephone_number%TYPE,   
      flag_mta_mac                    IN      varchar2,                         
      i_mta_mac                         IN       DM_DIAL_TONE.mta_mac%TYPE      
    )                                                                           
   RETURN VARCHAR2                                                              
   IS                                                                           
   BEGIN                                                                        
                                                                                
      DECLARE                                                                   
             i_sub_svc_id				SUB_SVC.SUB_SVC_ID%TYPE;                           
             i_records                                    NUMBER := 0;          
             rs_sub_svc_parm                       VARCHAR2(7);                 
             cm_sub_svc_id                          SUB_SVC.SUB_SVC_ID%TYPE;    
                                                                                
	     i_dt_composed_sub_svc_id       SUB_SVC.SUB_SVC_ID%TYPE;                   
             i_emta_composed_sub_svc_id  SUB_SVC.SUB_SVC_ID%TYPE;               
                                                                                
	     i_ssn_sub_svc_id			SUB_SVC.SUB_SVC_ID%TYPE;                               
	     p_cm_mac					DM_EMTA_DEVICE_CONTROL.CM_MAC%TYPE;                          
	     i_cm_mac                                   DM_EMTA_DEVICE_CONTROL.CM_MAC%T
YPE;                                                                            
                                                                                
	     p_manufacturer				DM_EMTA_DEVICE_CONTROL.MANUFACTURER%TYPE;               
	     p_model					DM_V_DEVICE_DETAILS.MODEL%TYPE;                               
	     p_service_codes			DM_V_DEVICE_DETAILS.SERVICE_CODES%TYPE;                 
	     I_MAX_VOICE_PORT_NUM       NUMBER :=0;                                    
     	     p_package_id                             DM_EMTA_SERVICE_CODES.PACKAG
E_ID%TYPE;                                                                      
                                                                                
                                                                                
	     p_telephone_number                 DM_DIAL_TONE.telephone_number%TYPE;    
	     p_mta_mac                                 DM_DIAL_TONE.mta_mac%TYPE;      
	     p_port_number                           DM_DIAL_TONE.port_number%TYPE;    
	     in_port_number				 DM_DIAL_TONE.port_number%TYPE;                         
	     p_fname                                      DM_VOICE_SUB.FIRST_NAME%TYPE;
                                                                                
                                                                                
     	     p_lname                                      DM_VOICE_SUB.LAST_NAME%T
YPE;                                                                            
                                                                                
	     p_cnam                                         DM_VOICE_SUB.LAST_NAME%TYPE
;                                                                               
                                                                                
                                                                                
	     i_nam_bac_subntwk_id             NUMBER := get_subntwk_id('NAM_BAC','netwo
rk_access_manager');                                                            
                                                                                
             i_net2ph_subntwk_id                 NUMBER := 0;                   
     	     i_9_subntwk_id                          NUMBER := get_subntwk_id(i_he
ad_end||'_'||i_bridger_node,'region');                                          
                                                                                
                                                                                
	     i_assoc_sub_svc_id                    SUB_SVC_ASSOC.ASSOC_SUB_SVC_ID%TYPE:
=0;                                                                             
                                                                                
	     i_vp_sub_svc_id                          SUB_SVC_ASSOC.ASSOC_SUB_SVC_ID%TY
PE:=0;                                                                          
                                                                                
	     num_of_voice_lines                    number:=0;                          
	     num_of_run                                 number:=0;                     
	     max_port_num                            number:=0;                        
	     V_SQL						VARCHAR2(4000);                                                
             subscriber_suspend                   varchar2(255);                
             suspension_source                    varchar2(255):=null;          
      BEGIN                                                                     
          BEGIN                                                                 
	    select status into subscriber_suspend from DM_V_SUBSCRIBER_DETAILS where AC
COUNT_NUMBER = i_account_number;                                                
                                                                                
	  EXCEPTION WHEN OTHERS THEN                                                   
	  NULL;                                                                        
	  END;                                                                         
                                                                                
	  if subscriber_suspend is not null then                                       
             suspension_source := 'csgbss';                                     
          end if;                                                               
                                                                                
if i_head_end in ('01','05','06','11','12','96') and i_bridger_node in  ('831320
00') then                                                                       
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('blnmt001svc','call_server'); 
	    elsif i_head_end in ('34','35') and i_bridger_node in  ('83131000','8313300
0') then                                                                        
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('blnmt001svc','call_server'); 
	    elsif i_head_end in ('01','11','13','37') and i_bridger_node = '83133000' t
hen                                                                             
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('chywy001svc','call_server'); 
	    elsif i_head_end in ('21','22','31','32','33','36','41','51','52','54','96'
) and i_bridger_node in ('83133000','83133430') then                            
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('cspwy001svc','call_server'); 
	    elsif i_head_end in ('16','17','18','19','21') and i_bridger_node = '831320
00' then                                                                        
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('hlnmt001svc','call_server'); 
	   elsif i_head_end in ('31','32','33','51','52') and i_bridger_node = '8313200
0' then                                                                         
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('mslmt001svc','call_server'); 
	    elsif i_head_end in ('01','02','04','05','07','08','09','11','41','51','55'
) and i_bridger_node = '83131000' then                                          
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('gdjco001svc','call_server'); 
	    elsif i_head_end in ('22','23','25','26','27','29','30','31','38','96') and
 i_bridger_node = '83131000' then                                               
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('cacco001svc','call_server'); 
      	    elsif i_head_end in ('41','42','61') and i_bridger_node = '83132000' 
then                                                                            
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('grfmt001svc','call_server'); 
	    elsif i_head_end in ('07') and i_bridger_node = '83132000' then            
            i_net2ph_subntwk_id := get_subntwk_id('cmstest0','call_server');    
	    elsif i_head_end in ('61','62') and i_bridger_node = '83133000' then       
            i_net2ph_subntwk_id := get_subntwk_id('gdjco001svc','call_server'); 
	    elsif i_head_end in ('01','02','04','05','06','08','09','11','12','13','16'
,'17','18','19','21','22','23','25','26','27','29','30','31','32','33','34','35'
,'36','37','38','41','42','51','52','54','55','61','62','96') and i_bridger_node
 in  ('00001000','00002000','00003000','00003430') then                         
                                                                                
            i_net2ph_subntwk_id := get_subntwk_id('blngmt93ca1','call_server'); 
	     elsif i_head_end in ('07') and i_bridger_node in  ('00001000') then       
            i_net2ph_subntwk_id := get_subntwk_id('blngmt93ca1','call_server'); 
	    elsif i_head_end in ('07') and i_bridger_node = '00002000' then            
            i_net2ph_subntwk_id := get_subntwk_id('voicecmts','call_server');   
	end if;                                                                        
                                                                                
                                                                                
            BEGIN                                                               
                                                                                
	    select cm_mac into i_cm_mac  from DM_EMTA_DEVICE_CONTROL where mta_mac = i_
mta_mac;                                                                        
                                                                                
            select count(*) into num_of_voice_lines from DM_DIAL_TONE where mta_
mac = i_mta_mac;                                                                
                                                                                
                                                                                
	   EXCEPTION WHEN NO_DATA_FOUND THEN                                           
	    NULL;                                                                      
	    END;                                                                       
                                                                                
           BEGIN                                                                
              V_SQL := 'SELECT COUNT(*) FROM DM_VOICE_SUB_OLD1 where rownum < 2'
;                                                                               
                                                                                
	      EXECUTE IMMEDIATE V_SQL into num_of_run;                                 
                                                                                
	   EXCEPTION WHEN OTHERS THEN                                                  
	    num_of_run:=0;                                                             
	   END;                                                                        
                                                                                
	if num_of_run != 0 then                                                        
	   BEGIN                                                                       
   	    SELECT ssp.sub_svc_id into  i_assoc_sub_svc_id FROM SUB_SVC ss , SUB_SVC
_PARM ssp                                                                       
                                                                                
	    WHERE ssp.VAL = upper(i_cm_mac)                                            
		 AND ssp.PARM_ID = k_84746                                                    
		 AND ss.SUB_SVC_ID = ssp.SUB_SVC_ID                                           
		 AND ss.SUB_ID = i_sub_id                                                     
		 AND ss.SVC_ID = k_179;                                                       
	    EXCEPTION WHEN NO_DATA_FOUND THEN                                          
	    NULL;                                                                      
	    END;                                                                       
         end if;                                                                
                                                                                
                FOR i IN ssvc_get_data_record.FIRST..ssvc_get_data_record.LAST  
                 LOOP                                                           
                                                                                
			 ssvc_get_data_row := ssvc_get_data_record (i);                              
                                                                                
			 IF ssvc_get_data_row.svc_id = k_126 THEN                                    
                                                                                
                                           -----EMTA composed k_113             
					    if i_assoc_sub_svc_id = 0 then                                         
                                                   if flag_mta_mac = 'false' the
n                                                                               
                                                                                
                                                                                
						  IF k_debug = 'Y' THEN                                                   
						    DBMS_OUTPUT.PUT_LINE('Processing Insert_SubSvc(Before j cursor):: ['  
								|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'                  
								|| ' account_number: ' || i_account_number                              
								|| ' Sub-ID: ' || i_sub_id                                              
								|| ' Svc-ID: ' || ssvc_get_data_row.svc_id);                            
						  END IF;                                                                 
                                                                                
							       SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;           
							       ssvc_put_data_row.SUB_ID := i_sub_id;                             
							       ssvc_put_data_row.START_DT := k_created_dtm;                      
							       ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id;                   
							       ssvc_put_data_row.SAMP_VER := 0;                                  
							       if subscriber_suspend is not null then                            
							       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                        
							       else                                                              
							       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                        
							       end if;                                                           
							       ssvc_put_data_row.CREATED_DTM := k_created_dtm;                   
							       ssvc_put_data_row.CREATED_BY := k_created_by;                     
							       ssvc_put_data_row.END_DT := NULL;                                 
							       ssvc_put_data_row.PURCHASE_DT := NULL;                            
							       ssvc_put_data_row.PARENT_SUB_SVC_ID := NULL;                      
							       ssvc_put_data_row.PRE_STATUS_ID := 33;                            
							       ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                 
							       ssvc_put_data_row.MODIFIED_BY := k_modified_by;                   
							       ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                     
							       ssvc_put_data_row.SVC_ID := k_113;                                
                                                                                
							       ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;           
							       p_ssvc_ctr := p_ssvc_ctr + 1;                                     
							       i_records := i_records + 1;                                       
                                                                                
							      i_emta_composed_sub_svc_id:=i_sub_svc_id;                          
                                                                                
                                                                                
									SELECT edc.CM_MAC,edc.MTA_MAC,edc.MANUFACTURER ,DD.MODEL, DD.SERVICE_CO
DES , edc.PACKAGE_ID                                                            
                                                                                
										     INTO p_cm_mac,p_mta_mac,p_manufacturer,p_model,p_service_codes,p_
package_id                                                                      
                                                                                
									FROM DM_EMTA_DEVICE_CONTROL edc , DM_V_DEVICE_DETAILS DD               
									 WHERE  edc.account_number=i_account_number                            
									   AND edc.MTA_MAC = i_mta_mac                                         
									       AND DD.cm_mac = edc.cm_mac;                                     
                                                                                
                                                                                
									  --Populate SUB_SVC record (177 - emta_device_control)                
									  SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;              
									  if lower(p_manufacturer) = 'arris'  and upper(p_model) in ('TM402G','
TM402P','TM502P','TM502G','WTM552G','TM602G') then                              
                                                                                
									  i_MAX_VOICE_PORT_NUM := 2;                                           
									  elsif lower(p_manufacturer) = 'arris'  and upper(p_model) in ('TM504G
','TM604G') then                                                                
                                                                                
									  i_MAX_VOICE_PORT_NUM := 4;                                           
									  elsif lower(p_manufacturer) = 'arris'  and upper(p_model) in ('TM608G
','TM508') then                                                                 
                                                                                
									  i_MAX_VOICE_PORT_NUM := 8;                                           
									  elsif lower(p_manufacturer) = 'arris'  and upper(p_model) in ('TM512'
,'TM612') then                                                                  
                                                                                
									  i_MAX_VOICE_PORT_NUM := 12;                                          
									  end if;                                                              
									  --                                                                   
									  IF k_debug = 'Y' THEN                                                
									     DBMS_OUTPUT.PUT_LINE('Insert_SubSvc(Inside j cursor):: ['         
											     || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'          
											     || ' account_number: ' || i_account_number                      
											     || ' Sub-ID: ' || i_sub_id                                      
											     || ' SubSvcId: ' || i_sub_svc_id                                
											     || ' SvcId: ' || ssvc_get_data_row.svc_id);                     
									  END IF;                                                              
									  --                                                                   
                                                                                
									  ssvc_put_data_row.SUB_ID := i_sub_id;                                
									  ssvc_put_data_row.START_DT := k_created_dtm;                         
									  ssvc_put_data_row.SAMP_VER := 0;                                     
									  if subscriber_suspend is not null then                               
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                      
									       else                                                            
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                      
									       end if;                                                         
									  ssvc_put_data_row.CREATED_DTM := k_created_dtm;                      
									  ssvc_put_data_row.CREATED_BY := k_created_by;                        
									  ssvc_put_data_row.END_DT := NULL;                                    
									  ssvc_put_data_row.PURCHASE_DT := NULL;                               
									  ssvc_put_data_row.PRE_STATUS_ID := 33;                               
									  ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                    
									  ssvc_put_data_row.MODIFIED_BY := k_modified_by;                      
									  ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                        
									  ssvc_put_data_row.SVC_ID := k_177;                                   
									  ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id ||'_emta_device_contro
l_'||i_account_number;                                                          
                                                                                
									  ssvc_put_data_row.PARENT_SUB_SVC_ID := i_emta_composed_sub_svc_id;   
                                                                                
									  ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;              
									  p_ssvc_ctr := p_ssvc_ctr + 1;                                        
									  i_records := i_records + 1;                                          
                                                                                
									  --Populate sub_svc_addr                                              
									  ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                     
									  ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                   
									  ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;     
									  p_ss_addr_ctr := p_ss_addr_ctr + 1;                                  
                                                                                
									  --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_
ID', i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                     
                                                                                
                                                                                
                                                                                
									   --create SSN                                                        
									  i_ssn_sub_svc_id := create_dlvy_plat(i_account_number, i_sub_id, i_su
b_svc_id, k_svc_dl_plat_id_hsd_sip, k_created_dtm);                             
                                                                                
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_nam_bac_subntwk_id, k_ntwk_role_nam ,k_created_dtm);                      
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_net2ph_subntwk_id, k_ntwk_role_call_server,k_created_dtm);                
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_9_subntwk_id, k_ntwk_role_nep ,k_created_dtm);                            
                                                                                
                                                                                
                                                                          select
 max(port_number) into max_port_num from DM_DIAL_TONE where mta_mac = p_mta_mac;
                                                                                
                                                                                
									  IF max_port_num IS NULL THEN                                         
										max_port_num:=0;                                                      
	  								  END IF;                                                            
                                                                                
                                                                          if i_M
AX_VOICE_PORT_NUM > max_port_num then                                           
                                                                                
									  num_of_voice_lines := max_port_num;                                  
									  else                                                                 
                                                                          num_of
_voice_lines := i_MAX_VOICE_PORT_NUM;                                           
                                                                                
									  end if;                                                              
									  rs_sub_svc_parm := create_parm_dm_emta_devcntl(i_account_number, i_su
b_id, i_sub_svc_id,  p_cm_mac,p_mta_mac,i_MAX_VOICE_PORT_NUM, p_manufacturer , p
_model, p_service_codes , p_cm_mac,num_of_voice_lines,p_package_id);            
                                                                                
                                                                                
									 if i_MAX_VOICE_PORT_NUM != 0 then                                     
									  for i IN 1..i_MAX_VOICE_PORT_NUM                                     
									  LOOP                                                                 
                                                                                
									  SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;              
									  									  --                                                        
									  IF k_debug = 'Y' THEN                                                
									     DBMS_OUTPUT.PUT_LINE('Insert_SubSvc(Inside j cursor):: ['         
											     || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'          
											     || ' account_number: ' || i_account_number                      
											     || ' Sub-ID: ' || i_sub_id                                      
											     || ' SubSvcId: ' || i_sub_svc_id                                
											     || ' SvcId: ' || ssvc_get_data_row.svc_id);                     
									  END IF;                                                              
									  --                                                                   
                                                                                
									  ssvc_put_data_row.SUB_ID := i_sub_id;                                
									  ssvc_put_data_row.START_DT := k_created_dtm;                         
									  ssvc_put_data_row.SAMP_VER := 0;                                     
									  if subscriber_suspend is not null then                               
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                      
									       else                                                            
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                      
									  end if;                                                              
									  ssvc_put_data_row.CREATED_DTM := k_created_dtm;                      
									  ssvc_put_data_row.CREATED_BY := k_created_by;                        
									  ssvc_put_data_row.END_DT := NULL;                                    
									  ssvc_put_data_row.PURCHASE_DT := NULL;                               
									  ssvc_put_data_row.PRE_STATUS_ID := 33;                               
									  ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                    
									  ssvc_put_data_row.MODIFIED_BY := k_modified_by;                      
									  ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                        
									  ssvc_put_data_row.SVC_ID := k_178;                                   
									  ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id ||'_voice_port_'||i_ac
count_number;                                                                   
                                                                                
									  ssvc_put_data_row.PARENT_SUB_SVC_ID := i_emta_composed_sub_svc_id;   
                                                                                
									  ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;              
									  p_ssvc_ctr := p_ssvc_ctr + 1;                                        
									  i_records := i_records + 1;                                          
                                                                                
									  --Populate sub_svc_addr                                              
									  ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                     
									  ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                   
									  ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;     
									  p_ss_addr_ctr := p_ss_addr_ctr + 1;                                  
                                                                                
									  --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_
ID', i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                     
                                                                                
                                                                                
									  i_ssn_sub_svc_id := create_dlvy_plat(i_account_number, i_sub_id, i_su
b_svc_id, k_svc_dl_plat_id_hsd_sip, k_created_dtm);                             
                                                                                
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_nam_bac_subntwk_id, k_ntwk_role_nam ,k_created_dtm);                      
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_net2ph_subntwk_id, k_ntwk_role_call_server,k_created_dtm);                
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_9_subntwk_id, k_ntwk_role_nep ,k_created_dtm);                            
                                                                                
                                                                                
									  --Populate DM_VOICE_PORT_SUB_SVC_ID                                  
									  vpss_parm_put_data_row.SUB_ID := i_sub_id;                           
									  vpss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                   
									  vpss_parm_put_data_row.PORT_NUMBER := i;                             
									  vpss_parm_put_data_row.MTA_MAC := p_mta_mac;                         
									  vpss_parm_put_data_record (p_vpss_parm_ctr) := vpss_parm_put_data_row
;                                                                               
                                                                                
									  p_vpss_parm_ctr := p_vpss_parm_ctr + 1;                              
                                                                                
									  rs_sub_svc_parm := create_parm_dm_voiceport(i_account_number, i_sub_i
d, i_sub_svc_id, p_mta_mac,p_cm_mac,i,num_of_voice_lines);                      
                                                                                
                                                                                
                                                                                
									  END LOOP;                                                            
									  end if;                                                              
									---------179 emta data port                                            
									  SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;              
                                                                                
									  --                                                                   
									  IF k_debug = 'Y' THEN                                                
									     DBMS_OUTPUT.PUT_LINE('Insert_SubSvc(Inside j cursor):: ['         
											     || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'          
											     || ' account_number: ' || i_account_number                      
											     || ' Sub-ID: ' || i_sub_id                                      
											     || ' SubSvcId: ' || i_sub_svc_id                                
											     || ' SvcId: ' || ssvc_get_data_row.svc_id);                     
									  END IF;                                                              
									  --                                                                   
                                                                                
									  ssvc_put_data_row.SUB_ID := i_sub_id;                                
									  ssvc_put_data_row.START_DT := k_created_dtm;                         
									  ssvc_put_data_row.SAMP_VER := 0;                                     
									  if subscriber_suspend is not null then                               
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                      
									       else                                                            
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                      
									  end if;                                                              
									  ssvc_put_data_row.CREATED_DTM := k_created_dtm;                      
									  ssvc_put_data_row.CREATED_BY := k_created_by;                        
									  ssvc_put_data_row.END_DT := NULL;                                    
									  ssvc_put_data_row.PURCHASE_DT := NULL;                               
									  ssvc_put_data_row.PRE_STATUS_ID := 33;                               
									  ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                    
									  ssvc_put_data_row.MODIFIED_BY := k_modified_by;                      
									  ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                        
									  ssvc_put_data_row.SVC_ID := k_179;                                   
									  ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id ||'_emta_data_port_'||
i_account_number;                                                               
                                                                                
									  ssvc_put_data_row.PARENT_SUB_SVC_ID := i_emta_composed_sub_svc_id;   
                                                                                
									  ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;              
									  p_ssvc_ctr := p_ssvc_ctr + 1;                                        
									  i_records := i_records + 1;                                          
                                                                                
									  --Populate sub_svc_addr                                              
									  ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                     
									  ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                   
									  ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;     
									  p_ss_addr_ctr := p_ss_addr_ctr + 1;                                  
                                                                                
									  --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_
ID', i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                     
                                                                                
                                                                                
									  i_ssn_sub_svc_id := create_dlvy_plat(i_account_number, i_sub_id, i_su
b_svc_id, k_svc_dl_plat_id_hsd_sip, k_created_dtm);                             
                                                                                
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_nam_bac_subntwk_id, k_ntwk_role_nam ,k_created_dtm);                      
                                                                                
									  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_
id, i_9_subntwk_id, k_ntwk_role_nep ,k_created_dtm);                            
                                                                                
                                                                                
									  rs_sub_svc_parm := create_parm_dm_emta_dataport(i_account_number, i_s
ub_id, i_sub_svc_id,  p_cm_mac);                                                
                                                                                
                                                                   end if;      
								 else                                                                   
								 begin                                                                  
								 select sub_svc_id into cm_sub_svc_id from sub_svc_parm where parm_id = 
k_84669 and upper(val)=upper(i_cm_mac);                                         
                                                                                
								 exception when others then                                             
								 null;                                                                  
								 end;                                                                   
                                                                                
								  begin                                                                 
								 select port_number into in_port_number from DM_DIAL_TONE where telephon
e_number  = i_telephone_number;                                                 
                                                                                
								 exception when others then                                             
								 null;                                                                  
								 end;                                                                   
                                                                                
								  BEGIN                                                                 
								SELECT ssp.sub_svc_id  into i_vp_sub_svc_id  FROM SUB_SVC ss , SUB_SVC_P
ARM ssp  , SUB_SVC_PARM ssp1                                                    
                                                                                
								    WHERE ssp.VAL = UPPER(i_mta_mac)                                    
									 AND ssp.PARM_ID = k_84802                                             
									 AND ssp1.VAL = in_port_number                                         
									 AND ssp1.PARM_ID =  k_84798                                           
									 AND ss.SUB_SVC_ID = ssp.SUB_SVC_ID                                    
									 AND ss.SUB_ID = i_sub_id                                              
									  AND ssp.SUB_SVC_ID = ssp1.SUB_SVC_ID                                 
									 AND ss.SVC_ID =  k_178;                                               
								    EXCEPTION WHEN NO_DATA_FOUND THEN                                   
								    NULL;                                                               
								    END;                                                                
                                                                                
								    	--Populate DM_VOICE_PORT_SUB_SVC_ID                                
									  vpss_parm_put_data_row.SUB_ID := i_sub_id;                           
									  vpss_parm_put_data_row.SUB_SVC_ID := i_vp_sub_svc_id;                
									  vpss_parm_put_data_row.PORT_NUMBER := in_port_number;                
									  vpss_parm_put_data_row.MTA_MAC := i_mta_mac;                         
									  vpss_parm_put_data_record (p_vpss_parm_ctr) := vpss_parm_put_data_row
;                                                                               
                                                                                
									  p_vpss_parm_ctr := p_vpss_parm_ctr + 1;                              
                                                                                
								 update sub_svc_parm set val = upper(i_mta_mac) where parm_id = k_84670 
and sub_svc_id = cm_sub_svc_id;                                                 
                                                                                
								 update sub_svc_parm set val = upper(i_mta_mac) where parm_id = k_84802 
and sub_svc_id in (select sub_svc_id from sub_svc_parm where parm_id = k_84804 a
nd upper(val)=upper(i_cm_mac));                                                 
                                                                                
								 update sub_svc_parm set val = num_of_voice_lines where parm_id = k_8469
1 and sub_svc_id = cm_sub_svc_id;                                               
                                                                                
						                 UPDATE SUB_SVC_PARM SET val = num_of_voice_lines WHERE pa
rm_id = k_84803 and sub_svc_id in (select sub_svc_id from sub_svc_parm where par
m_id = k_84804 and upper(val)=upper(i_cm_mac));                                 
                                                                                
								 end if;                                                                
         ----------Dial Tone composed                                           
	         IF k_debug = 'Y' THEN                                                 
			    DBMS_OUTPUT.PUT_LINE('Processing Insert_SubSvc(Before j cursor):: ['     
                                        || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:
SS:RR') || ']'                                                                  
                                                                                
                                        || ' account_number: ' || i_account_numb
er                                                                              
                                                                                
                                        || ' Sub-ID: ' || i_sub_id              
                                        || ' Svc-ID: ' || ssvc_get_data_row.svc_
id);                                                                            
                                                                                
			  END IF;                                                                    
                                  if i_TELEPHONE_NUMBER is not null then        
				       SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;              
				       ssvc_put_data_row.SUB_ID := i_sub_id;                                
				       ssvc_put_data_row.START_DT := k_created_dtm;                         
				       ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id;                      
				       ssvc_put_data_row.SAMP_VER := 0;                                     
				       if subscriber_suspend is not null then                               
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                      
									       else                                                            
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                      
					end if;                                                                    
				       ssvc_put_data_row.CREATED_DTM := k_created_dtm;                      
				       ssvc_put_data_row.CREATED_BY := k_created_by;                        
				       ssvc_put_data_row.END_DT := NULL;                                    
				       ssvc_put_data_row.PURCHASE_DT := NULL;                               
				       ssvc_put_data_row.PARENT_SUB_SVC_ID := NULL;                         
				       ssvc_put_data_row.PRE_STATUS_ID := 33;                               
				       ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                    
				       ssvc_put_data_row.MODIFIED_BY := k_modified_by;                      
				       ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                        
				       ssvc_put_data_row.SVC_ID := k_126;                                   
                                                                                
				       ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;              
				       p_ssvc_ctr := p_ssvc_ctr + 1;                                        
				       i_records := i_records + 1;                                          
                                                                                
				       i_dt_composed_sub_svc_id:=i_sub_svc_id;                              
                                                                                
                                                                                
						 SELECT DT.TELEPHONE_NUMBER , DT.MTA_MAC ,  DT.PORT_NUMBER , VS.FIRST_NAME
 , VS.LAST_NAME                                                                 
                                                                                
						             INTO p_telephone_number , p_mta_mac , p_port_number , p_fname
 , p_lname                                                                      
                                                                                
						 FROM DM_DIAL_TONE DT , DM_VOICE_SUB VS                                   
						 WHERE  DT.account_number = VS.account_number                             
						 and DT.account_number=i_account_number                                   
						 and DT.TELEPHONE_NUMBER=i_TELEPHONE_NUMBER;                              
                                                                                
						  --Populate SUB_SVC record (126 - Dial Tone)                             
						  SELECT sub_svc_seq.NEXTVAL INTO i_sub_svc_id FROM dual;                 
                                                                                
						  p_cnam :=  substr((substr(p_lname,1,13)||' '||p_fname),1,15);           
                                                                                
						  IF k_debug = 'Y' THEN                                                   
						     DBMS_OUTPUT.PUT_LINE('Insert_SubSvc(Inside j cursor):: ['            
								     || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR') || ']'             
								     || ' account_number: ' || i_account_number                         
								     || ' Sub-ID: ' || i_sub_id                                         
								     || ' SubSvcId: ' || i_sub_svc_id                                   
								     || ' SvcId: ' || ssvc_get_data_row.svc_id);                        
						  END IF;                                                                 
						  --                                                                      
                                                                                
						  ssvc_put_data_row.SUB_ID := i_sub_id;                                   
						  ssvc_put_data_row.START_DT := k_created_dtm;                            
						  ssvc_put_data_row.SAMP_VER := 0;                                        
						  if subscriber_suspend is not null then                                  
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 27;                      
									       else                                                            
									       ssvc_put_data_row.SUB_SVC_STATUS_ID := 23;                      
						  end if;                                                                 
						  ssvc_put_data_row.CREATED_DTM := k_created_dtm;                         
						  ssvc_put_data_row.CREATED_BY := k_created_by;                           
						  ssvc_put_data_row.END_DT := NULL;                                       
						  ssvc_put_data_row.PURCHASE_DT := NULL;                                  
						  ssvc_put_data_row.PRE_STATUS_ID := 33;                                  
						  ssvc_put_data_row.MODIFIED_DTM := k_modified_dtm;                       
						  ssvc_put_data_row.MODIFIED_BY := k_modified_by;                         
						  ssvc_put_data_row.SUB_SVC_ID := i_sub_svc_id;                           
						  ssvc_put_data_row.SVC_ID := k_122;                                      
						  ssvc_put_data_row.EXTERNAL_KEY := i_sub_svc_id ||'_dial_tone_'||i_accoun
t_number;                                                                       
                                                                                
						  ssvc_put_data_row.PARENT_SUB_SVC_ID := i_dt_composed_sub_svc_id;        
                                                                                
						  ssvc_put_data_record (p_ssvc_ctr) := ssvc_put_data_row;                 
						  p_ssvc_ctr := p_ssvc_ctr + 1;                                           
						  i_records := i_records + 1;                                             
                                                                                
						  --Populate sub_svc_addr                                                 
						  ss_addr_put_data_row.SUB_SVC_ID := i_sub_svc_id;                        
						  ss_addr_put_data_row.SUB_ADDR_ID := i_sub_addr_id;                      
						  ss_addr_put_data_record (p_ss_addr_ctr) := ss_addr_put_data_row;        
						  p_ss_addr_ctr := p_ss_addr_ctr + 1;                                     
                                                                                
						  --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC', 'SUB_SVC_ID'
, i_sub_svc_id, 'SUB_ADDR_ID', i_sub_addr_id,'Success');                        
                                                                                
                                                                                
                                                                                
						   --create SSN                                                           
						   i_ssn_sub_svc_id := create_dlvy_plat(i_account_number, i_sub_id, i_sub_
svc_id, k_svc_dl_plat_id_voip, k_created_dtm);                                  
                                                                                
                                                                                
						  --i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_i
d, i_nam_bac_subntwk_id, k_ntwk_role_nam ,k_created_dtm);                       
                                                                                
						  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_id,
 i_net2ph_subntwk_id, k_ntwk_role_call_server,k_created_dtm);                   
                                                                                
						  i_ssn_sub_svc_id := create_ssn(i_account_number, i_sub_id, i_sub_svc_id,
 i_9_subntwk_id, k_ntwk_role_nep ,k_created_dtm);                               
                                                                                
                                                                                
					       --Populate DM_VOICE_PORT_SUB_SVC_ID                                 
						  dtss_parm_put_data_row.SUB_ID := i_sub_id;                              
						  dtss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;                      
						  dtss_parm_put_data_row.PORT_NUMBER := p_port_number;                    
						  dtss_parm_put_data_row.MTA_MAC := p_mta_mac;                            
						  dtss_parm_put_data_record (p_dtss_parm_ctr) := dtss_parm_put_data_row;  
						  p_dtss_parm_ctr := p_dtss_parm_ctr + 1;                                 
                                                                                
                                                 --if i_MAX_VOICE_PORT_NUM >= to
_number(p_port_number)  then                                                    
                                                                                
						    rs_sub_svc_parm := create_parm_dm_dt(i_account_number, i_sub_id, i_sub
_svc_id,  p_telephone_number , p_mta_mac , p_port_number,p_cnam,suspension_sourc
e);                                                                             
                                                                                
                                                 -- else                        
						 -- rs_sub_svc_parm := create_parm_dm_dt(i_account_number, i_sub_id, i_sub
_svc_id,  p_telephone_number , null , null,p_cnam,suspension_source);           
                                                                                
						 --end if;                                                                
				       end if;                                                              
                                                                                
                         END IF;                                                
                                                                                
                 END LOOP;                                                      
                                                                                
		 slog_put_data_row.RS_SUB_SVC := 'Success -' || ' [p_ssvc_ctr: ' || p_ssvc_ctr
 || ' records: ' || i_records || ']';                                           
                                                                                
		 --                                                                           
                 IF k_debug = 'Y' THEN                                          
                   DBMS_OUTPUT.PUT_LINE('Insert_SubSvc:: [' || TO_CHAR(SYSDATE,'
DD-MON-YYYY HH24:MI:SS:RR') || ']'                                              
                                                                                
                              || ' account_number: ' || i_account_number        
                              || ' SubId: ' || i_sub_id                         
                              || ' Status : ' || slog_put_data_row.RS_SUB_SVC); 
                  END IF;                                                       
                 --                                                             
                                                                                
             RETURN slog_put_data_row.RS_SUB_SVC;                               
                                                                                
      END;                                                                      
 END insert_sub_svc;                                                            
                                                                                
 FUNCTION create_parm_dm_dt (                                                   
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_tel_num                              IN      DM_DIAL_TONE.TELEPHONE_NUMB
ER%TYPE,                                                                        
                                                                                
      i_mta_mac                             IN      DM_DIAL_TONE.MTA_MAC%TYPE,  
      i_port_num                            IN      DM_DIAL_TONE.PORT_NUMBER%TYP
E,                                                                              
                                                                                
      i_cnam                                   IN      DM_VOICE_SUB.LAST_NAME%TY
PE,                                                                             
                                                                                
      suspension_source                IN      VARCHAR2                         
    )                                                                           
   RETURN VARCHAR2                                                              
   IS                                                                           
      rs_sub_svc_parm   VARCHAR2(7);                                            
   BEGIN                                                                        
                                                                                
     DECLARE                                                                    
      --to select parm_ids of provisionable svc; svc_id in sub_svc is the sub_ty
ped svc id                                                                      
                                                                                
         i_validate_parm         BOOLEAN := NULL;                               
         i_data_exists           BOOLEAN := NULL;                               
         i_prereq_sub_svc_id     SUB_SVC_PARM_DEPY.PREREQ_SUB_SVC_ID%TYPE;      
         i_records               NUMBER := 0;                                   
      BEGIN                                                                     
         --Create PARM's for this service k_122                                 
         --                                                                     
         FOR i IN ssdt_parm_get_data_record.FIRST..ssdt_parm_get_data_record.LAS
T                                                                               
                                                                                
         LOOP                                                                   
             i_validate_parm   := NULL;                                         
             i_data_exists     := NULL;                                         
             ssdt_parm_get_data_row := ssdt_parm_get_data_record (i);           
                                                                                
             --                                                                 
             IF k_debug = 'Y' THEN                                              
                DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-Id: ' |
| k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                      
                                                                                
                                     || ' Required: ' || ssdt_parm_get_data_row.
is_required                                                                     
                                                                                
                                     || ' Reserved: ' || ssdt_parm_get_data_row.
is_reserved                                                                     
                                                                                
                                     || ' DfltVal: ' || ssdt_parm_get_data_row.d
flt_val                                                                         
                                                                                
                                     || ' Parm-Nm :' || ssdt_parm_get_data_row.p
arm_nm);                                                                        
                                                                                
             END IF;                                                            
             --                                                                 
                                                                                
             --Svc-102-smp_cm_hsd_docsis_access                                 
                                                                                
            IF ssdt_parm_get_data_row.parm_nm = 'telephone_number' AND i_tel_num
 IS NOT NULL THEN                                                               
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists,  i_tel_num);                                                   
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := i_tel_num;                       
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssdt_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || i_tel_num);                                         
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
             ELSIF ssdt_parm_get_data_row.parm_nm = 'cnd' AND i_tel_num IS NOT N
ULL THEN                                                                        
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists,  i_tel_num);                                                   
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := i_tel_num;                       
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssdt_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || i_tel_num);                                         
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		  ELSIF ssdt_parm_get_data_row.parm_nm = 'suspension_source' AND suspension_so
urce IS NOT NULL THEN                                                           
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists,  suspension_source);                                           
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := suspension_source;               
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssdt_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || suspension_source);                                 
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
                                                                                
		ELSIF ssdt_parm_get_data_row.parm_nm = 'cnam' AND i_cnam IS NOT NULL THEN     
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists,  i_cnam);                                                      
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := i_cnam;                          
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssdt_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || i_cnam);                                            
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
             ELSIF ssdt_parm_get_data_row.parm_nm = 'device_id' AND i_mta_mac IS
 NOT NULL THEN                                                                  
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists, i_mta_mac);                                                    
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_mta_mac);                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssdt_parm_get_data_row.parm_id, 'Succe
ss');                                                                           
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || i_mta_mac);                                         
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
             ELSIF ssdt_parm_get_data_row.parm_nm = 'port_number' AND i_port_num
 IS NOT NULL THEN                                                               
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssdt_parm_get_data_row.is_requi
red, ssdt_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssdt_parm_get_data_row.dflt_val
, i_data_exists, i_port_num);                                                   
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := i_port_num;                      
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssdt_parm_get_data_row.parm_id, 'Succe
ss');                                                                           
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_122 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssdt_parm_get_data
_row.parm_nm || ' VAL :' || i_port_num);                                        
                                                                                
                   END IF;                                                      
             END IF;                                                            
           ELSIF ssdt_parm_get_data_row.parm_nm = 'requested_activation_date' th
en                                                                              
                                                                                
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssdt_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := TO_CHAR(SYSDATE,'YYYYMMDDHHMISS')
;                                                                               
                                                                                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssdt_parm_get_data_row.parm_id, 'Succe
ss');                                                                           
                                                                                
                                                                                
                                                                                
          END IF;                                                               
      END LOOP; --EndLoop for get_record cursor                                 
                                                                                
         rs_sub_svc_parm := 'Success';                                          
          --                                                                    
      END;                                                                      
      RETURN rs_sub_svc_parm;                                                   
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END create_parm_dm_dt;                                                       
                                                                                
FUNCTION create_parm_dm_emta_devcntl (                                          
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_cm_mac                             IN      DM_EMTA_DEVICE_CONTROL.CM_MAC
%TYPE,                                                                          
                                                                                
      i_mta_mac                            IN      DM_EMTA_DEVICE_CONTROL.MTA_MA
C%TYPE,                                                                         
                                                                                
      i_max_voiceport                   IN      NUMBER,                         
      i_cm_manufacturer              IN      DM_EMTA_DEVICE_CONTROL.MANUFACTURER
%TYPE,                                                                          
                                                                                
      i_cm_model                          IN      DM_V_DEVICE_DETAILS.MODEL%TYPE
,                                                                               
                                                                                
      i_cm_servicecodes               IN      DM_V_DEVICE_DETAILS.SERVICE_CODES%
TYPE,                                                                           
                                                                                
      i_serial_number                    IN      DM_EMTA_DEVICE_CONTROL.CM_MAC%T
YPE,                                                                            
                                                                                
      i_num_of_voice_lines           IN     number,                             
      i_package_id                        IN      DM_EMTA_SERVICE_CODES.PACKAGE_
ID%TYPE                                                                         
                                                                                
    )                                                                           
   RETURN VARCHAR2                                                              
   IS                                                                           
      rs_sub_svc_parm   VARCHAR2(7);                                            
   BEGIN                                                                        
                                                                                
     DECLARE                                                                    
      --to select parm_ids of provisionable svc; svc_id in sub_svc is the sub_ty
ped svc id                                                                      
                                                                                
         i_validate_parm         BOOLEAN := NULL;                               
         i_data_exists           BOOLEAN := NULL;                               
         i_prereq_sub_svc_id     SUB_SVC_PARM_DEPY.PREREQ_SUB_SVC_ID%TYPE;      
         i_records               NUMBER := 0;                                   
	 i_enable_sip          varchar2(255):='n';                                     
	 i_device_type        varchar2(255):='eMTA';                                   
      BEGIN                                                                     
         --Create PARM's for this service k_177                                 
         --                                                                     
	 if instr(i_cm_servicecodes,'HIP') > 0 then                                    
	 i_enable_sip := 'y';                                                          
	 end if;                                                                       
                                                                                
	 if lower(i_package_id) = 'transponders'then                                   
	 i_device_type:='Transponders';                                                
	 elsif lower(i_package_id) = 'rf_tool'then                                     
	 i_device_type:='RF_Tool';                                                     
	 end if;                                                                       
                                                                                
         FOR i IN ssemta_parm_get_data_record.FIRST..ssemta_parm_get_data_record
.LAST                                                                           
                                                                                
         LOOP                                                                   
             i_validate_parm   := NULL;                                         
             i_data_exists     := NULL;                                         
             ssemta_parm_get_data_row := ssemta_parm_get_data_record (i);       
                                                                                
             --                                                                 
             IF k_debug = 'Y' THEN                                              
                DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-Id: ' |
| k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                      
                                                                                
                                     || ' Required: ' || ssemta_parm_get_data_ro
w.is_required                                                                   
                                                                                
                                     || ' Reserved: ' || ssemta_parm_get_data_ro
w.is_reserved                                                                   
                                                                                
                                     || ' DfltVal: ' || ssemta_parm_get_data_row
.dflt_val                                                                       
                                                                                
                                     || ' Parm-Nm :' || ssemta_parm_get_data_row
.parm_nm);                                                                      
                                                                                
             END IF;                                                            
             --                                                                 
                                                                                
             --Process PARM='cm_technology','cm_model','cm_mac','cm_manufacturer
'                                                                               
                                                                                
                                                                                
            IF ssemta_parm_get_data_row.parm_nm = 'device_id' AND i_cm_mac IS NO
T NULL THEN                                                                     
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_cm_mac);                                                  
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_cm_mac);                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_mac);                                        
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssemta_parm_get_data_row.parm_nm = 'enable_sip' AND i_enable_sip IS NOT 
NULL THEN                                                                       
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_enable_sip);                                              
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_enable_sip;                    
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_enable_sip);                                    
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssemta_parm_get_data_row.parm_nm = 'equipment_type' AND i_device_type IS
 NOT NULL THEN                                                                  
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_device_type);                                             
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_device_type;                   
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_device_type);                                   
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssemta_parm_get_data_row.parm_nm = 'device_nickname' AND i_cm_mac IS NOT
 NULL THEN                                                                      
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_cm_mac);                                                  
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_cm_mac);                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_mac);                                        
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssemta_parm_get_data_row.parm_nm = 'account_id_and_nickname' AND i_cm_ma
c IS NOT NULL THEN                                                              
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_cm_mac);                                                  
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_account_number||upper(i_cm_mac)
;                                                                               
                                                                                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_mac);                                        
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssemta_parm_get_data_row.parm_nm = 'num_of_voice_lines' AND i_num_of_voi
ce_lines IS NOT NULL THEN                                                       
                                                                                
		  i_data_exists := TRUE;                                                      
                  i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_r
equired, ssemta_parm_get_data_row.is_reserved,                                  
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists,  i_num_of_voice_lines);                                      
                                                                                
                    IF i_validate_parm = TRUE THEN                              
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_num_of_voice_lines;            
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemta_parm_get_data_row.parm_id, 'Su
ccess');                                                                        
                                                                                
                                                                                
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_num_of_voice_lines);                            
                                                                                
                   END IF;                                                      
		   END IF;                                                                    
              ELSIF ssemta_parm_get_data_row.parm_nm = 'device_id2' AND i_mta_ma
c IS NOT NULL THEN                                                              
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_mta_mac);                                                  
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_mta_mac);                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_mta_mac);                                       
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
      ELSIF ssemta_parm_get_data_row.parm_nm = 'unique_mta_mac' AND i_mta_mac IS
 NOT NULL THEN                                                                  
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_mta_mac);                                                  
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_mta_mac);                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_mta_mac);                                       
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
             ELSIF ssemta_parm_get_data_row.parm_nm = 'manufacturer' AND i_cm_ma
nufacturer IS NOT NULL THEN                                                     
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_cm_manufacturer);                                          
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_cm_manufacturer;               
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_manufacturer);                               
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
             ELSIF ssemta_parm_get_data_row.parm_nm = 'model' AND i_cm_model IS 
NOT NULL THEN                                                                   
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_cm_model);                                                 
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_cm_model;                      
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_model);                                      
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
             ELSIF ssemta_parm_get_data_row.parm_nm = 'service_codes' AND i_cm_s
ervicecodes IS NOT NULL THEN                                                    
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_cm_servicecodes);                                          
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_cm_servicecodes;               
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_cm_servicecodes);                               
                                                                                
                   END IF;                                                      
             END IF;                                                            
                   --                                                           
             ELSIF ssemta_parm_get_data_row.parm_nm = 'serial_number' AND i_seri
al_number IS NOT NULL THEN                                                      
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_serial_number);                                            
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_serial_number;                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_serial_number);                                 
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
              ELSIF ssemta_parm_get_data_row.parm_nm = 'max_voice_port_num' AND 
i_max_voiceport IS NOT NULL THEN                                                
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemta_parm_get_data_row.is_req
uired, ssemta_parm_get_data_row.is_reserved,                                    
                                                                                
                                                 ssemta_parm_get_data_row.dflt_v
al, i_data_exists, i_max_voiceport);                                            
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemta_parm_get_data_row.parm
_id;                                                                            
                                                                                
                   ss_parm_put_data_row.VAL := i_max_voiceport;                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID',ssemta_parm_get_data_row.parm_id, 'Suc
cess');                                                                         
                                                                                
                                                                                
                   --                                                           
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_177 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemta_parm_get_da
ta_row.parm_nm || ' VAL :' || i_max_voiceport);                                 
                                                                                
                   END IF;                                                      
                   --                                                           
                END IF;                                                         
           END IF;                                                              
       END LOOP; --EndLoop for get_record cursor                                
                                                                                
         rs_sub_svc_parm := 'Success';                                          
          --                                                                    
      END;                                                                      
      RETURN rs_sub_svc_parm;                                                   
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END create_parm_dm_emta_devcntl;                                             
                                                                                
   FUNCTION create_parm_dm_emta_dataport (                                      
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_cm_mac                             IN      DM_EMTA_DEVICE_CONTROL.CM_MAC
%TYPE                                                                           
                                                                                
      )                                                                         
   RETURN VARCHAR2                                                              
   IS                                                                           
      rs_sub_svc_parm   VARCHAR2(7);                                            
   BEGIN                                                                        
                                                                                
     DECLARE                                                                    
      --to select parm_ids of provisionable svc; svc_id in sub_svc is the sub_ty
ped svc id                                                                      
                                                                                
         i_validate_parm         BOOLEAN := NULL;                               
         i_data_exists           BOOLEAN := NULL;                               
         i_prereq_sub_svc_id     SUB_SVC_PARM_DEPY.PREREQ_SUB_SVC_ID%TYPE;      
         i_records               NUMBER := 0;                                   
      BEGIN                                                                     
         --Create PARM's for this service k_179                                 
         --                                                                     
         FOR i IN ssemtadp_parm_get_data_record.FIRST..ssemtadp_parm_get_data_re
cord.LAST                                                                       
                                                                                
         LOOP                                                                   
             i_validate_parm   := NULL;                                         
             i_data_exists     := NULL;                                         
             ssemtadp_parm_get_data_row := ssemtadp_parm_get_data_record (i);   
                                                                                
             --                                                                 
             IF k_debug = 'Y' THEN                                              
                DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-Id: ' |
| k_179 || ' Sub-Svc-Id: ' || i_sub_svc_id                                      
                                                                                
                                     || ' Required: ' || ssemta_parm_get_data_ro
w.is_required                                                                   
                                                                                
                                     || ' Reserved: ' || ssemta_parm_get_data_ro
w.is_reserved                                                                   
                                                                                
                                     || ' DfltVal: ' || ssemta_parm_get_data_row
.dflt_val                                                                       
                                                                                
                                     || ' Parm-Nm :' || ssemta_parm_get_data_row
.parm_nm);                                                                      
                                                                                
             END IF;                                                            
             --                                                                 
                                                                                
             --Svc-197-smp_cm_hsd_docsis_access                                 
             --Process PARM='cm_technology','cm_model','cm_mac','cm_manufacturer
'                                                                               
                                                                                
                                                                                
            IF ssemtadp_parm_get_data_row.parm_nm = 'data_port_id' AND i_cm_mac 
IS NOT NULL THEN                                                                
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemtadp_parm_get_data_row.is_r
equired, ssemtadp_parm_get_data_row.is_reserved,                                
                                                                                
                                                 ssemtadp_parm_get_data_row.dflt
_val, i_data_exists,  i_cm_mac);                                                
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemtadp_parm_get_data_row.pa
rm_id;                                                                          
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_cm_mac);                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemtadp_parm_get_data_row.parm_id, '
Success');                                                                      
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_179 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemtadp_parm_get_
data_row.parm_nm || ' VAL :' || i_cm_mac);                                      
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
             ELSIF ssemtadp_parm_get_data_row.parm_nm = 'device_and_port_combina
tion' AND i_cm_mac IS NOT NULL THEN                                             
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssemtadp_parm_get_data_row.is_r
equired, ssemtadp_parm_get_data_row.is_reserved,                                
                                                                                
                                                 ssemtadp_parm_get_data_row.dflt
_val, i_data_exists,  i_cm_mac);                                                
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssemtadp_parm_get_data_row.pa
rm_id;                                                                          
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_cm_mac);                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssemtadp_parm_get_data_row.parm_id, '
Success');                                                                      
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_179 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssemtadp_parm_get_
data_row.parm_nm || ' VAL :' || i_cm_mac);                                      
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
                                                                                
             END IF;                                                            
          END LOOP; --EndLoop for get_record cursor                             
                                                                                
         rs_sub_svc_parm := 'Success';                                          
          --                                                                    
      END;                                                                      
      RETURN rs_sub_svc_parm;                                                   
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END CREATE_PARM_DM_EMTA_DATAPORT;                                            
                                                                                
FUNCTION create_parm_dm_voiceport (                                             
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN       SUB_SVC.SUB_SVC_ID%TYPE,    
      i_mta_mac                             IN      DM_EMTA_DEVICE_CONTROL.MTA_M
AC%TYPE,                                                                        
                                                                                
      i_cm_mac                              IN      DM_EMTA_DEVICE_CONTROL.CM_MA
C%TYPE,                                                                         
                                                                                
      i_port_number                       IN       NUMBER ,                     
      i_num_of_voice_lines           IN     number                              
      )                                                                         
   RETURN VARCHAR2                                                              
   IS                                                                           
      rs_sub_svc_parm   VARCHAR2(7);                                            
   BEGIN                                                                        
                                                                                
     DECLARE                                                                    
      --to select parm_ids of provisionable svc; svc_id in sub_svc is the sub_ty
ped svc id                                                                      
                                                                                
         i_validate_parm         BOOLEAN := NULL;                               
         i_data_exists           BOOLEAN := NULL;                               
         i_prereq_sub_svc_id     SUB_SVC_PARM_DEPY.PREREQ_SUB_SVC_ID%TYPE;      
         i_records               NUMBER := 0;                                   
      BEGIN                                                                     
         --Create PARM's for this service k_179                                 
         --                                                                     
         FOR i IN ssvp_parm_get_data_record.FIRST..ssvp_parm_get_data_record.LAS
T                                                                               
                                                                                
         LOOP                                                                   
             i_validate_parm   := NULL;                                         
             i_data_exists     := NULL;                                         
             ssvp_parm_get_data_row := ssvp_parm_get_data_record (i);           
                                                                                
             --                                                                 
             IF k_debug = 'Y' THEN                                              
                DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-Id: ' |
| k_179 || ' Sub-Svc-Id: ' || i_sub_svc_id                                      
                                                                                
                                     || ' Required: ' || ssvp_parm_get_data_row.
is_required                                                                     
                                                                                
                                     || ' Reserved: ' || ssvp_parm_get_data_row.
is_reserved                                                                     
                                                                                
                                     || ' DfltVal: ' || ssvp_parm_get_data_row.d
flt_val                                                                         
                                                                                
                                     || ' Parm-Nm :' || ssvp_parm_get_data_row.p
arm_nm);                                                                        
                                                                                
             END IF;                                                            
             --                                                                 
                                                                                
             --Svc-197-smp_cm_hsd_docsis_access                                 
             --Process PARM='cm_technology','cm_model','i_mta_mac','cm_manufactu
rer'                                                                            
                                                                                
                                                                                
            IF ssvp_parm_get_data_row.parm_nm = 'device_id' AND i_mta_mac IS NOT
 NULL THEN                                                                      
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssvp_parm_get_data_row.is_requi
red, ssvp_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssvp_parm_get_data_row.dflt_val
, i_data_exists,  i_mta_mac);                                                   
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_mta_mac);                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_mta_mac);                                         
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
             ELSIF ssvp_parm_get_data_row.parm_nm = 'device_nickname' AND i_cm_m
ac IS NOT NULL THEN                                                             
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssvp_parm_get_data_row.is_requi
red, ssvp_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssvp_parm_get_data_row.dflt_val
, i_data_exists,  i_cm_mac);                                                    
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_cm_mac);                 
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_cm_mac);                                          
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
             ELSIF ssvp_parm_get_data_row.parm_nm = 'port_number' AND i_port_num
ber IS NOT NULL THEN                                                            
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssvp_parm_get_data_row.is_requi
red, ssvp_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssvp_parm_get_data_row.dflt_val
, i_data_exists,  i_port_number);                                               
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_port_number);            
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_port_number);                                     
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		 ELSIF ssvp_parm_get_data_row.parm_nm = 'num_of_voice_lines' AND i_num_of_voic
e_lines IS NOT NULL THEN                                                        
                                                                                
		  i_data_exists := TRUE;                                                      
                  i_validate_parm := validate_parm(ssvp_parm_get_data_row.is_req
uired, ssvp_parm_get_data_row.is_reserved,                                      
                                                                                
                                                 ssvp_parm_get_data_row.dflt_val
, i_data_exists,  i_num_of_voice_lines);                                        
                                                                                
                    IF i_validate_parm = TRUE THEN                              
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := i_num_of_voice_lines;            
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
                                                                                
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_num_of_voice_lines);                              
                                                                                
                   END IF;                                                      
		   END IF;                                                                    
                   --                                                           
              ELSIF ssvp_parm_get_data_row.parm_nm = 'device_and_port_combinatio
n' AND i_port_number IS NOT NULL THEN                                           
                                                                                
                i_data_exists := TRUE;                                          
                i_validate_parm := validate_parm(ssvp_parm_get_data_row.is_requi
red, ssvp_parm_get_data_row.is_reserved,                                        
                                                                                
                                                 ssvp_parm_get_data_row.dflt_val
, i_data_exists,  i_port_number);                                               
                                                                                
                IF i_validate_parm = TRUE THEN                                  
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := upper(i_mta_mac)||upper(i_port_nu
mber);                                                                          
                                                                                
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_port_number);                                     
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
                END IF;                                                         
		ELSIF ssvp_parm_get_data_row.parm_nm = 'protocol' THEN                        
                                                                                
                   --Populate SUB_SVC_PARM record                               
                   ss_parm_put_data_row.SUB_SVC_ID := i_sub_svc_id;             
                   ss_parm_put_data_row.PARM_ID := ssvp_parm_get_data_row.parm_i
d;                                                                              
                                                                                
                   ss_parm_put_data_row.VAL := 'NCS';                           
                   ss_parm_put_data_record (p_ss_parm_ctr) := ss_parm_put_data_r
ow;                                                                             
                                                                                
                   p_ss_parm_ctr := p_ss_parm_ctr + 1;                          
                   i_records := i_records + 1;                                  
                   --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_PAR
M', 'SUB_SVC_ID', i_sub_svc_id, 'PARM_ID', ssvp_parm_get_data_row.parm_id, 'Succ
ess');                                                                          
                                                                                
		   --                                                                         
                   IF k_debug = 'Y' THEN                                        
                      DBMS_OUTPUT.PUT_LINE('Processing SubSvcParm:: ' || ' Svc-I
d: ' || k_176 || ' Sub-Svc-Id: ' || i_sub_svc_id                                
                                                                                
                                           || ' Parm-Nm :' || ssvp_parm_get_data
_row.parm_nm || ' VAL :' || i_port_number);                                     
                                                                                
                   END IF;                                                      
                   --                                                           
                                                                                
             END IF;                                                            
          END LOOP; --EndLoop for get_record cursor                             
                                                                                
         rs_sub_svc_parm := 'Success';                                          
          --                                                                    
      END;                                                                      
      RETURN rs_sub_svc_parm;                                                   
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END create_parm_dm_voiceport;                                                
                                                                                
  FUNCTION get_subntwk_id(                                                      
          i_subntwk_nm        VARCHAR2,                                         
          i_subntwk_typ       VARCHAR2                                          
   )                                                                            
      RETURN NUMBER                                                             
   IS                                                                           
      i_subntwk_id      SUBNTWK.SUBNTWK_ID%TYPE;                                
   BEGIN                                                                        
             SELECT subntwk_id INTO i_subntwk_id                                
               FROM SUBNTWK                                                     
              WHERE LOWER(subntwk_nm) = LOWER(i_subntwk_nm)                     
                AND subntwk_typ_id = (SELECT subntwk_typ_id FROM REF_SUBNTWK_TYP
 WHERE LOWER(subntwk_typ_nm) = LOWER(i_subntwk_typ));                           
                                                                                
                                                                                
        RETURN i_subntwk_id;                                                    
   EXCEPTION                                                                    
        WHEN NO_DATA_FOUND THEN                                                 
                --DBMS_OUTPUT.PUT_LINE('no subntwk for '||i_subntwk_nm);RETURN N
ULL;                                                                            
                                                                                
		NULL;                                                                         
		RETURN NULL;                                                                  
  END get_subntwk_id;                                                           
                                                                                
FUNCTION create_ssn (                                                           
      i_account_number            IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,     
      i_sub_id                            IN      SUB.SUB_ID%TYPE,              
      i_sub_svc_id                     IN      SUB_SVC_NTWK.SUB_SVC_ID%TYPE,    
      i_subntwk_id                    IN      SUB_SVC_NTWK.SUBNTWK_ID%TYPE,     
      i_ntwk_role_id                  IN      SUB_SVC_NTWK.NTWK_ROLE_ID%TYPE,   
      k_created_dtm                  IN      DATE                               
   )                                                                            
   RETURN NUMBER                                                                
   IS                                                                           
   BEGIN                                                                        
      ssn_put_data_row.SUB_SVC_ID := i_sub_svc_id;                              
      ssn_put_data_row.SUBNTWK_ID := i_subntwk_id;                              
      ssn_put_data_row.NTWK_ROLE_ID := i_ntwk_role_id;                          
      ssn_put_data_row.CREATED_DTM := k_created_dtm;                            
      ssn_put_data_row.CREATED_BY := k_created_by;                              
      ssn_put_data_row.MODIFIED_DTM := k_modified_dtm;                          
      ssn_put_data_row.MODIFIED_BY := k_modified_by;                            
                                                                                
      ssn_put_data_record (p_ssn_ctr) := ssn_put_data_row;                      
      p_ssn_ctr := p_ssn_ctr + 1;                                               
      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_NTWK', 'SUB_SVC_
ID', i_sub_svc_id, 'SUBNTWK_ID', i_subntwk_id, 'Success');                      
                                                                                
                                                                                
      --                                                                        
      IF k_debug = 'Y' THEN                                                     
         DBMS_OUTPUT.PUT_LINE('Insert_SSN:: [' || TO_CHAR(SYSDATE,'DD-MON-YYYY H
H24:MI:SS:RR') || ']'                                                           
                                                                                
                               || ' csg_account_number: ' || i_account_number   
                               || ' SubId: ' || i_sub_id                        
                               || ' SubSvcId : ' || i_sub_svc_id                
                               || ' SubNtwkId : ' || i_subntwk_id               
                               || ' SubNtwkRoleId : ' || i_ntwk_role_id         
                               || ' p_ssn_ctr : ' || p_ssn_ctr);                
      END IF;                                                                   
                                                                                
      RETURN i_sub_svc_id;                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END create_ssn;                                                              
                                                                                
                                                                                
FUNCTION create_dlvy_plat (                                                     
      i_account_number     IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,            
      i_sub_id			 IN      SUB.SUB_ID%TYPE,                                      
      i_sub_svc_id		 IN      SUB_SVC_NTWK.SUB_SVC_ID%TYPE,                      
      i_svc_dlvy_plat_id     IN      SUB_SVC_DELIVERY_PLAT.SVC_DELIVERY_PLAT_ID%
TYPE,                                                                           
                                                                                
      k_created_dtm           IN      DATE                                      
   )                                                                            
   RETURN NUMBER                                                                
   IS                                                                           
   BEGIN                                                                        
      ssd_plat_put_data_row.SUB_SVC_ID := i_sub_svc_id;                         
      ssd_plat_put_data_row.SVC_DELIVERY_PLAT_ID := i_svc_dlvy_plat_id;         
      ssd_plat_put_data_row.CREATED_DTM := k_created_dtm;                       
      ssd_plat_put_data_row.CREATED_BY := k_created_by;                         
      ssd_plat_put_data_row.MODIFIED_DTM := k_modified_dtm;                     
      ssd_plat_put_data_row.MODIFIED_BY := k_modified_by;                       
      ssd_plat_put_data_row.STATUS := 'active';                                 
      ssd_plat_put_data_row.VER := 1;                                           
                                                                                
      ssd_plat_put_data_record (p_ssd_plat_ctr) := ssd_plat_put_data_row;       
      p_ssd_plat_ctr := p_ssd_plat_ctr + 1;                                     
      --insert_sub_logical(i_account_number, i_sub_id, 'SUB_SVC_DELIVERY_PLAT', 
'SUB_SVC_ID', i_sub_svc_id, NULL, NULL, 'Success');                             
                                                                                
                                                                                
                                                                                
      --                                                                        
      IF k_debug = 'Y' THEN                                                     
         DBMS_OUTPUT.PUT_LINE('Insert_SSN_Delivery_Plat:: [' || TO_CHAR(SYSDATE,
'DD-MON-YYYY HH24:MI:SS:RR') || ']'                                             
                                                                                
                               || ' account_number: ' || i_account_number       
                               || ' SubId: ' || i_sub_id                        
                               || ' SubSvcId : ' || i_sub_svc_id                
                               || ' SubDlvyPlatId : ' || i_svc_dlvy_plat_id     
                               || ' p_ssd_plat_ctr : ' || p_ssd_plat_ctr);      
      END IF;                                                                   
      --                                                                        
                                                                                
      RETURN i_sub_svc_id;                                                      
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN NULL;                                                              
   END create_dlvy_plat;                                                        
                                                                                
PROCEDURE insert_bulk_data                                                      
   IS                                                                           
   BEGIN                                                                        
      --Bulk load the SUBSCRIBER record                                         
      dbms_application_info.set_action(action_name => 'SUB');                   
      p_sub_ctr := 1;                                                           
      FORALL p_sub_ctr IN sub_put_data_record.FIRST..sub_put_data_record.LAST   
         INSERT INTO SUB                                                        
            VALUES sub_put_data_record (p_sub_ctr)                              
            LOG ERRORS INTO ERR$_SUB ('SUB:' || 'TimeStamp:' || TO_CHAR(SYSDATE,
'DD-MON-YYYY HH24:MI:SS:RR'))                                                   
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          sub_put_data_record.DELETE;                                           
      --                                                                        
      --Bulk load the SUB_PARM record                                           
      dbms_application_info.set_action(action_name => 'SUB_PARM');              
      p_sparm_ctr := 1;                                                         
      FORALL p_sparm_ctr IN sparm_put_data_record.FIRST..sparm_put_data_record.L
AST                                                                             
                                                                                
         INSERT INTO SUB_PARM                                                   
            VALUES sparm_put_data_record (p_sparm_ctr)                          
            LOG ERRORS INTO ERR$_SUB_PARM ('SUB PARM:' || 'TimeStamp:' || TO_CHA
R(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR'))                                         
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          sparm_put_data_record.DELETE;                                         
      --                                                                        
      --Bulk load the LOCATION record                                           
      dbms_application_info.set_action(action_name => 'LOCATION');              
      p_loc_ctr := 1;                                                           
      FORALL p_loc_ctr IN loc_put_data_record.FIRST..loc_put_data_record.LAST   
        INSERT INTO LOCATION                                                    
            VALUES loc_put_data_record (p_loc_ctr)                              
            LOG ERRORS INTO ERR$_LOCATION ('LOCATION:' || 'TimeStamp:' || TO_CHA
R(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR'))                                         
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          loc_put_data_record.DELETE;                                           
      --                                                                        
       --Bulk load the LOCATION_DTL record                                      
      dbms_application_info.set_action(action_name => 'LOCATION_DTL');          
      p_locd_ctr := 1;                                                          
      FORALL p_locd_ctr IN locd_put_data_record.FIRST..locd_put_data_record.LAST
                                                                                
                                                                                
         INSERT INTO LOCATION_DTL                                               
            VALUES locd_put_data_record (p_locd_ctr)                            
            LOG ERRORS INTO ERR$_LOCATION_DTL                                   
               ('LOCATION_DTL :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY
 HH24:MI:SS:RR'))                                                               
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          locd_put_data_record.DELETE;                                          
                                                                                
      --Bulk load the SUB_ADDR record                                           
      dbms_application_info.set_action(action_name => 'SUB_ADDR');              
      p_saddr_ctr := 1;                                                         
      FORALL p_saddr_ctr IN saddr_put_data_record.FIRST..saddr_put_data_record.L
AST                                                                             
                                                                                
         INSERT INTO SUB_ADDR                                                   
            VALUES saddr_put_data_record (p_saddr_ctr)                          
            LOG ERRORS INTO ERR$_SUB_ADDR ('SUB_ADDR:' || 'TimeStamp:' || TO_CHA
R(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR'))                                         
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          saddr_put_data_record.DELETE;                                         
      --                                                                        
      --Bulk load the SUB_CONTACT record                                        
      dbms_application_info.set_action(action_name => 'SUB_CONTACT');           
      p_scont_ctr := 1;                                                         
      FORALL p_scont_ctr IN scont_put_data_record.FIRST..scont_put_data_record.L
AST                                                                             
                                                                                
         INSERT INTO SUB_CONTACT                                                
            VALUES scont_put_data_record (p_scont_ctr)                          
            LOG ERRORS INTO ERR$_SUB_CONTACT ('SUB_CONTACT:' || 'TimeStamp:' || 
TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS:RR'))                                   
                                                                                
           REJECT LIMIT UNLIMITED;                                              
          scont_put_data_record.DELETE;                                         
      --                                                                        
                                                                                
      --Bulk load the SUB_CONTACT_PARM record                                   
      dbms_application_info.set_action(action_name => 'SUB_CONTACT_PARM');      
      p_sctparm_ctr := 1;                                                       
      FORALL p_sctparm_ctr IN sctparm_put_data_record.FIRST..sctparm_put_data_re
cord.LAST                                                                       
                                                                                
         INSERT INTO SUB_CONTACT_PARM                                           
            VALUES sctparm_put_data_record (p_sctparm_ctr)                      
            LOG ERRORS INTO ERR$_SUB_CONTACT_PARM                               
               ('SUB CONTACT PARM:' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-Y
YYY HH24:MI:SS:RR'))                                                            
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          sctparm_put_data_record.DELETE;                                       
      --                                                                        
                                                                                
      --Bulk load the SUB_SVC record                                            
      dbms_application_info.set_action(action_name => 'SUB_SVC');               
      p_ssvc_ctr := 1;                                                          
      FORALL p_ssvc_ctr IN ssvc_put_data_record.FIRST..ssvc_put_data_record.LAST
                                                                                
                                                                                
         INSERT INTO SUB_SVC                                                    
            VALUES ssvc_put_data_record (p_ssvc_ctr)                            
             LOG ERRORS INTO ERR$_SUB_SVC                                       
             ('SUB_SVC :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:M
I:SS:RR'))                                                                      
                                                                                
            REJECT LIMIT UNLIMITED;                                             
          ssvc_put_data_record.DELETE;                                          
      --                                                                        
      --Bulk load the SUB_SVC_ADDR record                                       
      dbms_application_info.set_action(action_name => 'SUB_SVC_ADDR');          
      p_ss_addr_ctr := 1;                                                       
      FORALL p_ss_addr_ctr IN ss_addr_put_data_record.FIRST..ss_addr_put_data_re
cord.LAST                                                                       
                                                                                
         INSERT INTO SUB_SVC_ADDR                                               
            VALUES ss_addr_put_data_record (p_ss_addr_ctr)                      
            LOG ERRORS INTO ERR$_SUB_SVC_ADDR                                   
              ('SUB SVC ADDR :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY 
HH24:MI:SS:RR'))                                                                
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ss_addr_put_data_record.DELETE;                                       
      --                                                                        
                                                                                
       --Bulk load the SUB_SVC_PARM record                                      
      dbms_application_info.set_action(action_name => 'SUB_SVC_PARM');          
      p_ss_parm_ctr := 1;                                                       
      FORALL p_ss_parm_ctr IN ss_parm_put_data_record.FIRST..ss_parm_put_data_re
cord.LAST                                                                       
                                                                                
         INSERT INTO SUB_SVC_PARM                                               
            VALUES ss_parm_put_data_record (p_ss_parm_ctr)                      
            LOG ERRORS INTO ERR$_SUB_SVC_PARM                                   
             ('SUB SVC PARM:' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY HH
24:MI:SS:RR'))                                                                  
                                                                                
           REJECT LIMIT UNLIMITED;                                              
          ss_parm_put_data_record.DELETE;                                       
      --                                                                        
                                                                                
      --Bulk load the SUB_SVC_ASSOC record                                      
      dbms_application_info.set_action(action_name => 'SUB_SVC_ASSOC');         
      p_ss_assoc_ctr := 1;                                                      
      FORALL p_ss_assoc_ctr IN ss_assoc_put_data_record.FIRST..ss_assoc_put_data
_record.LAST                                                                    
                                                                                
         INSERT INTO SUB_SVC_ASSOC                                              
            VALUES ss_assoc_put_data_record (p_ss_assoc_ctr)                    
             LOG ERRORS INTO ERR$_SUB_SVC_ASSOC                                 
              ('SUB SVC ASSOC :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY
 HH24:MI:SS:RR'))                                                               
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ss_assoc_put_data_record.DELETE;                                      
      --                                                                        
                                                                                
      --Bulk load the SUB_SVC_DELIVERY_PLAT record                              
      dbms_application_info.set_action(action_name => 'SUB_SVC_DELIVERY_PLAT'); 
      p_ssd_plat_ctr := 1;                                                      
      FORALL p_ssd_plat_ctr IN ssd_plat_put_data_record.FIRST..ssd_plat_put_data
_record.LAST                                                                    
                                                                                
             INSERT INTO SUB_SVC_DELIVERY_PLAT                                  
            VALUES ssd_plat_put_data_record (p_ssd_plat_ctr)                    
            LOG ERRORS INTO ERR$_SUB_SVC_DELIVERY_PLAT                          
              ('SUB SVC DELIVERY PLAT :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-
MON-YYYY HH24:MI:SS:RR'))                                                       
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ssd_plat_put_data_record.DELETE;                                      
      --                                                                        
                                                                                
         --Bulk load the DM_DIAL_TONE_SUB_SVC_ID record                         
      dbms_application_info.set_action(action_name => 'DM_DIAL_TONE_SUB_SVC_ID')
;                                                                               
                                                                                
      p_dtss_parm_ctr := 1;                                                     
      FORALL p_dtss_parm_ctr IN dtss_parm_put_data_record.FIRST..dtss_parm_put_d
ata_record.LAST                                                                 
                                                                                
             INSERT INTO DM_DIAL_TONE_SUB_SVC_ID                                
            VALUES dtss_parm_put_data_record (p_dtss_parm_ctr)                  
            LOG ERRORS INTO ERR$_DM_DIAL_TONE_SUB_SVC_ID                        
              ('SUB SVC DELIVERY PLAT :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-
MON-YYYY HH24:MI:SS:RR'))                                                       
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          dtss_parm_put_data_record.DELETE;                                     
      --                                                                        
                                                                                
   --Bulk load the DM_VOICE_PORT_SUB_SVC_ID record                              
      dbms_application_info.set_action(action_name => 'DM_VOICE_PORT_SUB_SVC_ID'
);                                                                              
                                                                                
      p_vpss_parm_ctr := 1;                                                     
      FORALL p_vpss_parm_ctr IN vpss_parm_put_data_record.FIRST..vpss_parm_put_d
ata_record.LAST                                                                 
                                                                                
             INSERT INTO DM_VOICE_PORT_SUB_SVC_ID                               
            VALUES vpss_parm_put_data_record (p_vpss_parm_ctr)                  
            LOG ERRORS INTO ERR$_DM_VOICE_PORT_SUB_SVC_ID                       
              ('SUB SVC DELIVERY PLAT :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-
MON-YYYY HH24:MI:SS:RR'))                                                       
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          vpss_parm_put_data_record.DELETE;                                     
      --                                                                        
                                                                                
       --Bulk load the SUB_SVC_NTWK record                                      
      dbms_application_info.set_action(action_name => 'SUB_SVC_NTWK');          
      p_ssn_ctr := 1;                                                           
      FORALL p_ssn_ctr IN ssn_put_data_record.FIRST..ssn_put_data_record.LAST   
         INSERT INTO SUB_SVC_NTWK                                               
            VALUES ssn_put_data_record (p_ssn_ctr)                              
             LOG ERRORS INTO ERR$_SUB_SVC_NTWK                                  
             ('SUB SVC NTWK :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY H
H24:MI:SS:RR'))                                                                 
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ssn_put_data_record.DELETE;                                           
      --                                                                        
     /* --Bulk load the SUB_SVC_DEPY record                                     
      dbms_application_info.set_action(action_name => 'SUB_SVC_DEPY');          
      p_ss_depy_ctr := 1;                                                       
                                                                                
      FORALL p_ss_depy_ctr IN ss_depy_put_data_record.FIRST..ss_depy_put_data_re
cord.LAST                                                                       
                                                                                
         INSERT INTO SUB_SVC_DEPY                                               
            VALUES ss_depy_put_data_record (p_ss_depy_ctr)                      
            LOG ERRORS INTO ERR$_SUB_SVC_DEPY                                   
             ('SUB_SVC_DEPY :' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YYYY H
H24:MI:SS:RR'))                                                                 
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ss_depy_put_data_record.DELETE;                                       
      --                                                                        
      --Bulk load the SUB_SVC_PARM_DEPY record                                  
      dbms_application_info.set_action(action_name => 'SUB_SVC_PARM_DEPY');     
      p_ssp_depy_ctr := 1;                                                      
      FORALL p_ssp_depy_ctr IN ssp_depy_put_data_record.FIRST..ssp_depy_put_data
_record.LAST                                                                    
                                                                                
         INSERT INTO SUB_SVC_PARM_DEPY                                          
            VALUES ssp_depy_put_data_record (p_ssp_depy_ctr)                    
           LOG ERRORS INTO ERR$_SUB_SVC_PARM_DEPY                               
             ('SUB SVC PARM DEPY:' || 'TimeStamp:' || TO_CHAR(SYSDATE,'DD-MON-YY
YY HH24:MI:SS:RR'))                                                             
                                                                                
             REJECT LIMIT UNLIMITED;                                            
          ssp_depy_put_data_record.DELETE; */                                   
      --                                                                        
      dbms_application_info.set_action(action_name => 'UPDATE_SUB_DONE');       
      update_sub_done;                                                          
      --                                                                        
      COMMIT;                                                                   
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN;                                                                   
   END insert_bulk_data;                                                        
                                                                                
   PROCEDURE update_sub_done                                                    
   IS                                                                           
   BEGIN                                                                        
      --Update the SUB_DONE in DM_EMTA_DEVICE_CONTROL data extract              
      FORALL p_sd_account_number IN 1..sd_account_number_t.COUNT                
      UPDATE DM_VOICE_SUB                                                       
      SET SUB_DONE = 'Y'                                                        
      WHERE ACCOUNT_NUMBER = sd_account_number_t(p_sd_account_number)           
        AND SUB_DONE = 'N';                                                     
                                                                                
      sd_account_number_t.DELETE;                                               
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      RETURN;                                                                   
   END update_sub_done;                                                         
                                                                                
   PROCEDURE trim_failed_subs_data                                              
   IS                                                                           
   BEGIN                                                                        
                                                                                
        sub_put_data_record.DELETE(old_p_sub_ctr,sub_put_data_record.LAST);     
        sparm_put_data_record.DELETE(old_p_sparm_ctr,sparm_put_data_record.LAST)
;                                                                               
                                                                                
        loc_put_data_record.DELETE(old_p_loc_ctr,loc_put_data_record.LAST);     
        locd_put_data_record.DELETE(old_p_locd_ctr,locd_put_data_record.LAST);  
        saddr_put_data_record.DELETE(old_p_saddr_ctr,saddr_put_data_record.LAST)
;                                                                               
                                                                                
        scont_put_data_record.DELETE(old_p_scont_ctr,scont_put_data_record.LAST)
;                                                                               
                                                                                
        sctparm_put_data_record.DELETE(old_p_sctparm_ctr,sctparm_put_data_record
.LAST);                                                                         
                                                                                
        ssvc_put_data_record.DELETE(old_p_ssvc_ctr,ssvc_put_data_record.LAST);  
	ss_parm_put_data_record.DELETE(old_p_ss_parm_ctr,ss_parm_put_data_record.LAST);
                                                                                
                                                                                
        ss_addr_put_data_record.DELETE(old_p_ss_addr_ctr,ss_addr_put_data_record
.LAST);                                                                         
                                                                                
	/*--sntwk_put_data_record.DELETE(old_p_sntwk_ctr,sntwk_put_data_record.LAST);  
        ss_depy_put_data_record.DELETE(old_p_ss_depy_ctr,ss_depy_put_data_record
.LAST);                                                                         
                                                                                
        --nr_parm_put_data_record.DELETE(old_p_nr_parm_ctr,nr_parm_put_data_reco
rd.LAST);                                                                       
                                                                                
        ssp_depy_put_data_record.DELETE(old_p_ssp_depy_ctr,ssp_depy_put_data_rec
ord.LAST);*/                                                                    
                                                                                
        ssn_put_data_record.DELETE(old_p_ssn_ctr,ssn_put_data_record.LAST);     
        ssd_plat_put_data_record.DELETE(old_p_ssd_plat_ctr,ssd_plat_put_data_rec
ord.LAST);                                                                      
                                                                                
        dtss_parm_put_data_record.DELETE(old_p_dtss_parm_ctr,dtss_parm_put_data_
record.LAST);                                                                   
                                                                                
        vpss_parm_put_data_record.DELETE(old_p_vpss_parm_ctr,vpss_parm_put_data_
record.LAST);                                                                   
                                                                                
                                                                                
	ss_assoc_put_data_record.DELETE(old_p_ss_assoc_ctr,ss_assoc_put_data_record.LAS
T);                                                                             
                                                                                
                                                                                
        p_sub_ctr := old_p_sub_ctr;                                             
        p_sparm_ctr := old_p_sparm_ctr;                                         
        p_loc_ctr := old_p_loc_ctr;                                             
        p_locd_ctr:= old_p_locd_ctr;                                            
        p_saddr_ctr := old_p_saddr_ctr;                                         
        p_scont_ctr := old_p_scont_ctr;                                         
        p_sctparm_ctr := old_p_sctparm_ctr;                                     
        p_ssvc_ctr := old_p_ssvc_ctr;                                           
	p_ss_parm_ctr := old_p_ss_parm_ctr;                                            
        p_ss_addr_ctr := old_p_ss_addr_ctr;                                     
 /*   --p_sntwk_ctr := old_p_sntwk_ctr;                                         
        p_ss_depy_ctr := old_p_ss_depy_ctr;                                     
       --p_nr_parm_ctr := old_p_nr_parm_ctr;                                    
        p_ssp_depy_ctr := old_p_ssp_depy_ctr;*/                                 
        p_ssn_ctr :=  old_p_ssn_ctr;                                            
        p_ssd_plat_ctr :=  old_p_ssd_plat_ctr;                                  
	p_dtss_parm_ctr :=  old_p_dtss_parm_ctr;                                       
	p_vpss_parm_ctr :=  old_p_vpss_parm_ctr;                                       
	p_ss_assoc_ctr := old_p_ss_assoc_ctr;                                          
                                                                                
                                                                                
   EXCEPTION                                                                    
   WHEN OTHERS THEN                                                             
      dbms_output.put_line('in trim_failed_subs_data'|| substr(SQLERRM,0,100)); 
      RETURN;                                                                   
   END trim_failed_subs_data;                                                   
                                                                                
END bresnan_voice_dm;                                                           
PACKAGE bresnan_voice_dm                                                        
IS                                                                              
   --constants                                                                  
k_sub                                    CONSTANT REF_CLASS.class_id%TYPE   := 1
11;                                                                             
                                                                                
k_location_category             CONSTANT REF_CLASS.class_id%TYPE   := 4;        
k_sub_contact                      CONSTANT REF_CLASS.class_id%TYPE   := 114;   
k_debug                                CONSTANT CHAR(1)                         
       := 'N';                                                                  
                                                                                
                                                                                
k_created_dtm	              DATE;                                               
k_created_by                        CONSTANT VARCHAR2(30)              := 'VOICE
_DATA_MIGRATION';                                                               
                                                                                
k_modified_by                      CONSTANT VARCHAR2(30)              := NULL;  
k_modified_dtm                    CONSTANT DATE                              := 
NULL;                                                                           
                                                                                
                                                                                
 k_1                                  SVC.SVC_ID%TYPE;     --samp_sub           
                                                                                
 k_134                              SVC.SVC_ID%TYPE;                            
 k_145                              SVC.SVC_ID%TYPE;                            
                                                                                
 k_113                              SVC.SVC_ID%TYPE;                            
 k_177                              SVC.SVC_ID%TYPE;                            
 k_179                              SVC.SVC_ID%TYPE;                            
 k_178                              SVC.SVC_ID%TYPE;                            
 K_126                              SVC.SVC_ID%TYPE;                            
 K_122                              SVC.SVC_ID%TYPE;                            
 K_128                              SVC.SVC_ID%TYPE;                            
 K_176	                         SVC.SVC_ID%TYPE;                                
 K_175                              SVC.SVC_ID%TYPE;                            
 K_174                              SVC.SVC_ID%TYPE;                            
                                                                                
 k_100115                        PARM.PARM_ID%TYPE;   --acct_samp_sub (Svc_id = 
1(samp_sub))                                                                    
                                                                                
 k_86391                          PARM.PARM_ID%TYPE;   --status_samp_sub (Svc_id
 = 1(samp_sub))                                                                 
                                                                                
 k_86392                          PARM.PARM_ID%TYPE;   --max_number_of_internet_
services_samp_sub (Svc_id = 1(samp_sub))                                        
                                                                                
 k_86393                          PARM.PARM_ID%TYPE;   -- max_number_of_voice_li
nes_samp_sub (Svc_id = 1(samp_sub))                                             
                                                                                
 k_86394                          PARM.PARM_ID%TYPE;   --service_codes_samp_sub 
(Svc_id = 1(samp_sub))                                                          
                                                                                
 k_86395                          PARM.PARM_ID%TYPE;   --sub_locked_samp_sub (Sv
c_id = 1(samp_sub))                                                             
                                                                                
 k_81980                          PARM.PARM_ID%TYPE;   --maximum_number_of_login
s                                                                               
                                                                                
 k_81981                          PARM.PARM_ID%TYPE;   --max_number_of_personal_
webspace                                                                        
                                                                                
 k_81986                          PARM.PARM_ID%TYPE;   --allowed_access         
 K_80614				 PARM.PARM_ID%TYPE;                                                 
 K_80613				 PARM.PARM_ID%TYPE;                                                 
 K_80616				 PARM.PARM_ID%TYPE;                                                 
 K_80615				 PARM.PARM_ID%TYPE;                                                 
 max_number_of_ia         PARM.PARM_ID%TYPE;                                    
 max_number_of_vl         PARM.PARM_ID%TYPE;                                    
                                                                                
k_84746				 PARM.PARM_ID%TYPE;                                                  
k_84669				 PARM.PARM_ID%TYPE;                                                  
k_84670				 PARM.PARM_ID%TYPE;                                                  
k_84802				 PARM.PARM_ID%TYPE;                                                  
k_84804				 PARM.PARM_ID%TYPE;                                                  
k_84691				 PARM.PARM_ID%TYPE;                                                  
k_84803				 PARM.PARM_ID%TYPE;                                                  
k_84798                           PARM.PARM_ID%TYPE;                            
                                                                                
                                                                                
 k_svc_dl_plat_id_hsd_sip          REF_SVC_DELIVERY_PLAT.SVC_DELIVERY_PLAT_ID%TY
PE;                                                                             
                                                                                
 k_svc_dl_plat_id_resi_data       REF_SVC_DELIVERY_PLAT.SVC_DELIVERY_PLAT_ID%TYP
E;                                                                              
                                                                                
 k_svc_dl_plat_id_voip                REF_SVC_DELIVERY_PLAT.SVC_DELIVERY_PLAT_ID
%TYPE;                                                                          
                                                                                
                                                                                
k_ntwk_role_nep			     REF_NTWK_ROLE.NTWK_ROLE_ID%TYPE;                         
k_ntwk_role_call_server              REF_NTWK_ROLE.NTWK_ROLE_ID%TYPE;           
k_ntwk_role_nam                         REF_NTWK_ROLE.NTWK_ROLE_ID%TYPE;        
                                                                                
CURSOR svc_ids IS                                                               
          SELECT svc_id, svc_nm                                                 
            FROM SVC                                                            
            WHERE svc_id IN (k_126)                                             
            ORDER BY svc_id;                                                    
                                                                                
CURSOR svcemta_parm_ids IS                                                      
          SELECT s1.svc_id, s1.svc_nm, p.parm_id, p.parm_nm, p.is_required, p.is
_reserved, p.dflt_val                                                           
                                                                                
            FROM PARM p,                                                        
                 SVC s1,                                                        
                 SVC s2                                                         
           WHERE s1.svc_id = k_177                                              
             AND s1.base_svc_id = s2.svc_id                                     
             AND s2.svc_id = p.object_id                                        
        ORDER BY s1.svc_id, s1.svc_nm, s2.svc_id, s2.svc_nm, p.parm_id;         
                                                                                
CURSOR svcemtadataport_parm_ids IS                                              
          SELECT s1.svc_id, s1.svc_nm, p.parm_id, p.parm_nm, p.is_required, p.is
_reserved, p.dflt_val                                                           
                                                                                
            FROM PARM p,                                                        
                 SVC s1,                                                        
                 SVC s2                                                         
           WHERE s1.svc_id = k_179                                              
             AND s1.base_svc_id = s2.svc_id                                     
             AND s2.svc_id = p.object_id                                        
        ORDER BY s1.svc_id, s1.svc_nm, s2.svc_id, s2.svc_nm, p.parm_id;         
                                                                                
CURSOR svcvp_parm_ids IS                                                        
          SELECT s1.svc_id, s1.svc_nm, p.parm_id, p.parm_nm, p.is_required, p.is
_reserved, p.dflt_val                                                           
                                                                                
            FROM PARM p,                                                        
                 SVC s1,                                                        
                 SVC s2                                                         
           WHERE s1.svc_id = k_178                                              
             AND s1.base_svc_id = s2.svc_id                                     
             AND s2.svc_id = p.object_id                                        
        ORDER BY s1.svc_id, s1.svc_nm, s2.svc_id, s2.svc_nm, p.parm_id;         
                                                                                
                                                                                
CURSOR svcdt_parm_ids IS                                                        
          SELECT s1.svc_id, s1.svc_nm, p.parm_id, p.parm_nm, p.is_required, p.is
_reserved, p.dflt_val                                                           
                                                                                
            FROM PARM p,                                                        
                 SVC s1,                                                        
                 SVC s2                                                         
           WHERE s1.svc_id = k_122                                              
             AND s1.base_svc_id = s2.svc_id                                     
             AND s2.svc_id = p.object_id                                        
        ORDER BY s1.svc_id, s1.svc_nm, s2.svc_id, s2.svc_nm, p.parm_id;         
                                                                                
--[SUBSCRIBER]                                                                  
   TYPE sub_put_tbl               IS TABLE OF SUB%ROWTYPE INDEX BY BINARY_INTEGE
R;                                                                              
                                                                                
   sub_put_data_record            sub_put_tbl;                                  
   sub_put_data_row               SUB%ROWTYPE;                                  
   p_sub_ctr                      NUMBER := 1;                                  
   old_p_sub_ctr                  NUMBER;                                       
--                                                                              
                                                                                
--[SUB_PARM]                                                                    
   TYPE sparm_put_tbl             IS TABLE OF SUB_PARM%ROWTYPE INDEX BY BINARY_I
NTEGER;                                                                         
                                                                                
   sparm_put_data_record          sparm_put_tbl;                                
   sparm_put_data_row             SUB_PARM%ROWTYPE;                             
   p_sparm_ctr                    NUMBER := 1;                                  
   old_p_sparm_ctr                NUMBER;                                       
   --                                                                           
                                                                                
 --[LOCATION]                                                                   
   TYPE loc_put_tbl               IS TABLE OF LOCATION%ROWTYPE INDEX BY BINARY_I
NTEGER;                                                                         
                                                                                
   loc_put_data_record            loc_put_tbl;                                  
   loc_put_data_row               LOCATION%ROWTYPE;                             
   p_loc_ctr                      NUMBER := 1;                                  
   old_p_loc_ctr                  NUMBER;                                       
 --                                                                             
                                                                                
--[SUB_ADDR]                                                                    
   TYPE saddr_put_tbl             IS TABLE OF SUB_ADDR%ROWTYPE INDEX BY BINARY_I
NTEGER;                                                                         
                                                                                
   saddr_put_data_record          saddr_put_tbl;                                
   saddr_put_data_row             SUB_ADDR%ROWTYPE;                             
   p_saddr_ctr                         NUMBER := 1;                             
   old_p_saddr_ctr                  NUMBER;                                     
--                                                                              
                                                                                
--[LOCATION_DTL]                                                                
                                                                                
   TYPE locd_put_tbl              IS TABLE OF LOCATION_DTL%ROWTYPE INDEX BY BINA
RY_INTEGER;                                                                     
                                                                                
   locd_put_data_record           locd_put_tbl;                                 
   locd_put_data_row              LOCATION_DTL%ROWTYPE;                         
   p_locd_ctr                     NUMBER := 1;                                  
   old_p_locd_ctr                 NUMBER;                                       
   --                                                                           
 --[SUB_CONTACT]                                                                
   TYPE scont_put_tbl             IS TABLE OF SUB_CONTACT%ROWTYPE INDEX BY BINAR
Y_INTEGER;                                                                      
                                                                                
   scont_put_data_record          scont_put_tbl;                                
   scont_put_data_row             SUB_CONTACT%ROWTYPE;                          
   p_scont_ctr                    NUMBER := 1;                                  
   old_p_scont_ctr                NUMBER;                                       
   --                                                                           
                                                                                
--[SUB_CONTACT_PARM]                                                            
                                                                                
   TYPE sctparm_put_tbl           IS TABLE OF SUB_CONTACT_PARM%ROWTYPE INDEX BY 
BINARY_INTEGER;                                                                 
                                                                                
   sctparm_put_data_record        sctparm_put_tbl;                              
   sctparm_put_data_row           SUB_CONTACT_PARM%ROWTYPE;                     
   p_sctparm_ctr                  NUMBER := 1;                                  
   old_p_sctparm_ctr              NUMBER;                                       
 --                                                                             
                                                                                
 --[SUB_SVC]                                                                    
   TYPE ssvc_get_tbl              IS TABLE OF svc_ids%ROWTYPE INDEX BY BINARY_IN
TEGER;                                                                          
                                                                                
   ssvc_get_data_record           ssvc_get_tbl;                                 
   ssvc_get_data_row              svc_ids%ROWTYPE;                              
                                                                                
                                                                                
   TYPE ssvc_put_tbl              IS TABLE OF SUB_SVC%ROWTYPE INDEX BY BINARY_IN
TEGER;                                                                          
                                                                                
   ssvc_put_data_record           ssvc_put_tbl;                                 
   ssvc_put_data_row              SUB_SVC%ROWTYPE;                              
   p_ssvc_ctr                     NUMBER := 1;                                  
   old_p_ssvc_ctr                 NUMBER;                                       
--                                                                              
                                                                                
--[SUB_SVC_ADDR]                                                                
   TYPE ss_addr_put_tbl           IS TABLE OF SUB_SVC_ADDR%ROWTYPE INDEX BY BINA
RY_INTEGER;                                                                     
                                                                                
   ss_addr_put_data_record        ss_addr_put_tbl;                              
   ss_addr_put_data_row           SUB_SVC_ADDR%ROWTYPE;                         
   p_ss_addr_ctr                  NUMBER := 1;                                  
   old_p_ss_addr_ctr              NUMBER;                                       
--                                                                              
                                                                                
  --[SUB_SVC_PARM]                                                              
                                                                                
   TYPE ss_parm_put_tbl           IS TABLE OF SUB_SVC_PARM%ROWTYPE INDEX BY BINA
RY_INTEGER;                                                                     
                                                                                
   ss_parm_put_data_record        ss_parm_put_tbl;                              
   ss_parm_put_data_row           SUB_SVC_PARM%ROWTYPE;                         
   p_ss_parm_ctr                  NUMBER := 1;                                  
   old_p_ss_parm_ctr              NUMBER;                                       
                                                                                
  --[DM_DIAL_TONE_SUB_SVC_ID]                                                   
                                                                                
   TYPE dtss_parm_put_tbl           IS TABLE OF DM_DIAL_TONE_SUB_SVC_ID%ROWTYPE 
INDEX BY BINARY_INTEGER;                                                        
                                                                                
   dtss_parm_put_data_record        dtss_parm_put_tbl;                          
   dtss_parm_put_data_row           DM_DIAL_TONE_SUB_SVC_ID%ROWTYPE;            
   p_dtss_parm_ctr                  NUMBER := 1;                                
   old_p_dtss_parm_ctr              NUMBER;                                     
                                                                                
                                                                                
  --[DM_VOICE_PORT_SUB_SVC_ID]                                                  
                                                                                
   TYPE vpss_parm_put_tbl           IS TABLE OF DM_VOICE_PORT_SUB_SVC_ID%ROWTYPE
 INDEX BY BINARY_INTEGER;                                                       
                                                                                
   vpss_parm_put_data_record        vpss_parm_put_tbl;                          
   vpss_parm_put_data_row           DM_VOICE_PORT_SUB_SVC_ID%ROWTYPE;           
   p_vpss_parm_ctr                  NUMBER := 1;                                
   old_p_vpss_parm_ctr              NUMBER;                                     
                                                                                
                                                                                
--[SUB_SVC_DELIVERY_PLAT]                                                       
   TYPE ssd_plat_put_tbl          IS TABLE OF SUB_SVC_DELIVERY_PLAT%ROWTYPE INDE
X BY BINARY_INTEGER;                                                            
                                                                                
   ssd_plat_put_data_record       ssd_plat_put_tbl;                             
   ssd_plat_put_data_row          SUB_SVC_DELIVERY_PLAT%ROWTYPE;                
   p_ssd_plat_ctr                 NUMBER := 1;                                  
   old_p_ssd_plat_ctr             NUMBER;                                       
                                                                                
--[SUB_SVC_NTWK]                                                                
   TYPE ssn_put_tbl               IS TABLE OF SUB_SVC_NTWK%ROWTYPE INDEX BY BINA
RY_INTEGER;                                                                     
                                                                                
   ssn_put_data_record            ssn_put_tbl;                                  
   ssn_put_data_row               SUB_SVC_NTWK%ROWTYPE;                         
   p_ssn_ctr                             NUMBER := 1;                           
   old_p_ssn_ctr                      NUMBER;                                   
                                                                                
--                                                                              
                                                                                
--[SUB_SVC_PARM]                                                                
   TYPE ssemta_parm_get_tbl         IS TABLE OF svcemta_parm_ids%ROWTYPE INDEX B
Y BINARY_INTEGER;                                                               
                                                                                
   ssemta_parm_get_data_record      ssemta_parm_get_tbl;                        
   ssemta_parm_get_data_row          svcemta_parm_ids%ROWTYPE;                  
                                                                                
   --[SUB_SVC_PARM]                                                             
   TYPE ssemtadp_parm_get_tbl         IS TABLE OF svcemtadataport_parm_ids%ROWTY
PE INDEX BY BINARY_INTEGER;                                                     
                                                                                
   ssemtadp_parm_get_data_record      ssemtadp_parm_get_tbl;                    
   ssemtadp_parm_get_data_row         svcemtadataport_parm_ids%ROWTYPE;         
                                                                                
   --[SUB_SVC_PARM]                                                             
   TYPE ssvp_parm_get_tbl         IS TABLE OF svcvp_parm_ids%ROWTYPE INDEX BY BI
NARY_INTEGER;                                                                   
                                                                                
   ssvp_parm_get_data_record      ssvp_parm_get_tbl;                            
   ssvp_parm_get_data_row         svcvp_parm_ids%ROWTYPE;                       
                                                                                
   --[SUB_SVC_PARM]                                                             
   TYPE ssdt_parm_get_tbl         IS TABLE OF svcdt_parm_ids%ROWTYPE INDEX BY BI
NARY_INTEGER;                                                                   
                                                                                
   ssdt_parm_get_data_record      ssdt_parm_get_tbl;                            
   ssdt_parm_get_data_row         svcdt_parm_ids%ROWTYPE;                       
                                                                                
                                                                                
 --[SUB_SVC_ASSOC]                                                              
   TYPE ss_assoc_put_tbl           IS TABLE OF SUB_SVC_ASSOC%ROWTYPE INDEX BY BI
NARY_INTEGER;                                                                   
                                                                                
   ss_assoc_put_data_record        ss_assoc_put_tbl;                            
   ss_assoc_put_data_row           SUB_SVC_ASSOC%ROWTYPE;                       
   p_ss_assoc_ctr                  NUMBER := 1;                                 
   old_p_ss_assoc_ctr              NUMBER;                                      
                                                                                
                                                                                
 --return status by table/function/procedure insert [DM_VOICE_SUB_LOG]          
   TYPE slog_put_tbl              IS TABLE OF DM_VOICE_SUB_LOG%ROWTYPE INDEX BY 
BINARY_INTEGER;                                                                 
                                                                                
   slog_put_data_record           slog_put_tbl;                                 
   slog_put_data_row              DM_VOICE_SUB_LOG%ROWTYPE;                     
   p_slog_ctr                     NUMBER := 1;                                  
                                                                                
  --TYPE for distinct subs processed                                            
   TYPE sd_account_number     IS TABLE OF DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE INDEX
 BY BINARY_INTEGER;                                                             
                                                                                
   sd_account_number_t        sd_account_number;                                
   p_sd_account_number        NUMBER := 1;                                      
                                                                                
--Logical entity subscriber                                                     
   TYPE sent_put_tbl              IS TABLE OF DM_VOICE_SUB_LOGICAL%ROWTYPE INDEX
 BY BINARY_INTEGER;                                                             
                                                                                
   sent_put_data_record           sent_put_tbl;                                 
   sent_put_data_row              DM_VOICE_SUB_LOGICAL%ROWTYPE;                 
   p_sent_ctr                     NUMBER := 1;                                  
                                                                                
                                                                                
FUNCTION get_sub_status_id(                                                     
      i_sub_status        VARCHAR2                                              
   ) RETURN NUMBER;                                                             
                                                                                
FUNCTION insert_sub_parm (                                                      
      i_account_number       IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,          
      i_STATUS                     IN      varchar2,                            
      MAX_NUM_OF_IA        IN     varchar2,                                     
      MAX_NUM_OF_VL        IN     varchar2,                                     
      i_sub_id                       IN      SUB.SUB_ID%TYPE,                   
      i_N2P_STATUS            IN      DM_V_N2P_STATUS.N2P_STATUS%TYPE           
    )                                                                           
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION get_sub_addr_typ_id(                                                   
      i_sub_addr_type     VARCHAR2                                              
   ) RETURN NUMBER;                                                             
                                                                                
FUNCTION insert_sub_address (                                                   
      i_account_number      IN      DM_VOICE_SUB.account_number%TYPE,           
      i_sub_id                      IN      SUB.SUB_ID%TYPE,                    
      i_location_id               IN      LOCATION.LOCATION_ID%TYPE,            
      i_pref_nm                   IN      SUB_ADDR.preferred_nm%TYPE,           
      i_street_nm                IN      DM_VOICE_SUB.STREET_NAME%TYPE,         
      i_city                           IN      DM_VOICE_SUB.CITY%TYPE,          
      i_province_state         IN      DM_VOICE_SUB.state%TYPE,                 
      i_zipcode                     IN      DM_VOICE_SUB.zipcode%TYPE,          
      i_head_end                 IN      DM_V_SUBSCRIBER_DETAILS.head_end%TYPE, 
      i_bridger_node            IN      DM_V_SUBSCRIBER_DETAILS.bridger_node%TYP
E,                                                                              
                                                                                
      i_addr_type                 IN      VARCHAR2,                             
      k_created_dtm            IN      DATE                                     
   )                                                                            
   RETURN NUMBER;                                                               
                                                                                
FUNCTION insert_location_dtl (                                                  
      i_account_number         IN      DM_VOICE_SUB.account_number%TYPE,        
      i_sub_id                                IN      SUB.SUB_ID%TYPE,          
      i_location_id                         IN      LOCATION_DTL.LOCATION_ID%TYP
E,                                                                              
                                                                                
      i_city                                     IN      DM_VOICE_SUB.CITY%TYPE,
                                                                                
                                                                                
      i_province_state                   IN      DM_VOICE_SUB.state%TYPE,       
      i_zipcode                              IN      DM_VOICE_SUB.ZIPCODE%TYPE, 
      i_street_nm                          IN      DM_VOICE_SUB.STREET_NAME%TYPE
,                                                                               
                                                                                
      i_head_end                          IN      DM_V_SUBSCRIBER_DETAILS.head_e
nd%TYPE,                                                                        
                                                                                
      i_bridger_node                     IN      DM_V_SUBSCRIBER_DETAILS.bridger
_node%TYPE,                                                                     
                                                                                
      i_pref_nm                             IN      SUB_ADDR.preferred_nm%TYPE  
    )                                                                           
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION insert_sub_contact (                                                   
      i_account_number       IN      DM_VOICE_SUB.account_number%TYPE,          
      i_sub_id                       IN      SUB.SUB_ID%TYPE,                   
      i_location_id                IN      LOCATION.LOCATION_ID%TYPE,           
      i_first_name                 IN      DM_VOICE_SUB.first_name%TYPE,        
      i_last_name                 IN      DM_VOICE_SUB.last_name%TYPE,          
      i_home_phone             IN      DM_VOICE_SUB.HOME_PHONE%TYPE,            
      i_business_phone        IN    varchar2,                                   
      k_created_dtm             IN      DATE                                    
   )                                                                            
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION insert_sub_contact_parm (                                              
      i_account_number         IN      DM_VOICE_SUB.account_number%TYPE,        
      i_sub_id                         IN      SUB.SUB_ID%TYPE,                 
      i_sub_contact_id           IN      SUB_CONTACT_PARM.SUB_CONTACT_ID%TYPE,  
      i_first_name                  IN       DM_VOICE_SUB.first_name%TYPE,      
      i_last_name                   IN      DM_VOICE_SUB.last_name%TYPE,        
      i_home_phone               IN      DM_VOICE_SUB.HOME_PHONE%TYPE,          
      i_business_phone          IN      varchar2                                
   )                                                                            
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION insert_sub_svc_samp (                 --samp sub service               
      i_account_number				 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,            
      i_sub_id					         IN      SUB.SUB_ID%TYPE,                            
      i_sub_addr_id				         IN      SUB_ADDR.SUB_ADDR_ID%TYPE,              
      k_created_dtm				         IN      DATE,                                   
      i_sub_typ_id                                      IN      SUB.SUB_TYP_ID%T
YPE,                                                                            
                                                                                
       i_first_name		                         IN       DM_VOICE_SUB.first_name%T
YPE,                                                                            
                                                                                
      i_last_name				         IN      DM_VOICE_SUB.last_name%TYPE,              
      i_home_phone					 IN      DM_VOICE_SUB.HOME_PHONE%TYPE,                   
      i_status                                              IN       VARCHAR2,  
      I_N2P_STATUS                                   IN      DM_V_N2P_STATUS.N2P
_STATUS%TYPE                                                                    
                                                                                
      )                                                                         
   RETURN NUMBER;                                                               
                                                                                
FUNCTION insert_sub_svc (                                                       
      i_account_number             IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,    
      i_sub_id                             IN      SUB.SUB_ID%TYPE,             
      i_sub_addr_id                    IN      SUB_SVC_ADDR.SUB_ADDR_ID%TYPE,   
      i_head_end                        IN      DM_V_SUBSCRIBER_DETAILS.head_end
%TYPE,                                                                          
                                                                                
      i_bridger_node                   IN      DM_V_SUBSCRIBER_DETAILS.bridger_n
ode%TYPE,                                                                       
                                                                                
      k_created_dtm                   IN      DATE,                             
      i_telephone_number         IN       DM_DIAL_TONE.telephone_number%TYPE,   
      flag_mta_mac                    IN      varchar2,                         
      i_mta_mac                         IN       DM_DIAL_TONE.mta_mac%TYPE      
    )                                                                           
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION create_parm_dm_emta_devcntl (                                          
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_cm_mac                             IN      DM_EMTA_DEVICE_CONTROL.CM_MAC
%TYPE,                                                                          
                                                                                
      i_mta_mac                            IN      DM_EMTA_DEVICE_CONTROL.MTA_MA
C%TYPE,                                                                         
                                                                                
      i_max_voiceport                   IN      NUMBER,                         
      i_cm_manufacturer              IN      DM_EMTA_DEVICE_CONTROL.MANUFACTURER
%TYPE,                                                                          
                                                                                
      i_cm_model                          IN      DM_V_DEVICE_DETAILS.MODEL%TYPE
,                                                                               
                                                                                
      i_cm_servicecodes               IN      DM_V_DEVICE_DETAILS.SERVICE_CODES%
TYPE,                                                                           
                                                                                
      i_serial_number                    IN      DM_EMTA_DEVICE_CONTROL.CM_MAC%T
YPE,                                                                            
                                                                                
      i_num_of_voice_lines           IN     number,                             
      i_package_id                        IN      DM_EMTA_SERVICE_CODES.PACKAGE_
ID%TYPE                                                                         
                                                                                
    )                                                                           
   RETURN VARCHAR2;                                                             
                                                                                
   FUNCTION create_parm_dm_emta_dataport (                                      
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_cm_mac                             IN      DM_EMTA_DEVICE_CONTROL.CM_MAC
%TYPE                                                                           
                                                                                
      )                                                                         
   RETURN VARCHAR2;                                                             
                                                                                
 FUNCTION create_parm_dm_dt (                                                   
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN      SUB_SVC.SUB_SVC_ID%TYPE,     
      i_tel_num                              IN      DM_DIAL_TONE.TELEPHONE_NUMB
ER%TYPE,                                                                        
                                                                                
      i_mta_mac                             IN      DM_DIAL_TONE.MTA_MAC%TYPE,  
      i_port_num                            IN      DM_DIAL_TONE.PORT_NUMBER%TYP
E,                                                                              
                                                                                
      i_cnam                                   IN      DM_VOICE_SUB.LAST_NAME%TY
PE,                                                                             
                                                                                
      suspension_source                IN      VARCHAR2                         
    )                                                                           
   RETURN VARCHAR2;                                                             
                                                                                
 FUNCTION create_dlvy_plat (                                                    
      i_account_number            IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,     
      i_sub_id                        IN      SUB.SUB_ID%TYPE,                  
      i_sub_svc_id                    IN      SUB_SVC_NTWK.SUB_SVC_ID%TYPE,     
      i_svc_dlvy_plat_id              IN      SUB_SVC_DELIVERY_PLAT.SVC_DELIVERY
_PLAT_ID%TYPE,                                                                  
                                                                                
      k_created_dtm                   IN      DATE                              
   ) RETURN NUMBER;                                                             
                                                                                
  FUNCTION get_subntwk_id(                                                      
      i_subntwk_nm        VARCHAR2,                                             
      i_subntwk_typ       VARCHAR2                                              
   )                                                                            
    RETURN NUMBER;                                                              
                                                                                
  FUNCTION create_ssn (                                                         
      i_account_number            IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,     
      i_sub_id                        IN      SUB.SUB_ID%TYPE,                  
      i_sub_svc_id                    IN      SUB_SVC_NTWK.SUB_SVC_ID%TYPE,     
      i_subntwk_id                    IN      SUB_SVC_NTWK.SUBNTWK_ID%TYPE,     
      i_ntwk_role_id                  IN      SUB_SVC_NTWK.NTWK_ROLE_ID%TYPE,   
      k_created_dtm                   IN      DATE                              
   ) RETURN NUMBER;                                                             
                                                                                
PROCEDURE insert_sub_logical(                                                   
      isl_account_number       IN   DM_VOICE_SUB_LOGICAL.account_number%TYPE,   
      isl_sub_id                   IN   DM_VOICE_SUB_LOGICAL.SUB_ID%TYPE,       
      isl_tname                    IN   DM_VOICE_SUB_LOGICAL.TNAME%TYPE,        
      isl_sub_key1                 IN   DM_VOICE_SUB_LOGICAL.SUB_KEY1%TYPE,     
      isl_sub_key1_id              IN   DM_VOICE_SUB_LOGICAL.SUB_KEY1_ID%TYPE,  
      isl_sub_key2                 IN   DM_VOICE_SUB_LOGICAL.SUB_KEY2%TYPE,     
      isl_sub_key2_id              IN   DM_VOICE_SUB_LOGICAL.SUB_KEY2_ID%TYPE,  
      isl_sub_status               IN   DM_VOICE_SUB_LOGICAL.SUB_STATUS%TYPE    
   );                                                                           
                                                                                
FUNCTION create_parm_dm_voiceport (                                             
      i_account_number                 IN      DM_VOICE_SUB.ACCOUNT_NUMBER%TYPE,
                                                                                
                                                                                
      i_sub_id                                 IN      SUB.SUB_ID%TYPE,         
      i_sub_svc_id                         IN       SUB_SVC.SUB_SVC_ID%TYPE,    
      i_mta_mac                             IN      DM_EMTA_DEVICE_CONTROL.MTA_M
AC%TYPE,                                                                        
                                                                                
      i_cm_mac                              IN      DM_EMTA_DEVICE_CONTROL.CM_MA
C%TYPE,                                                                         
                                                                                
      i_port_number                       IN       NUMBER ,                     
      i_num_of_voice_lines           IN     number                              
      )                                                                         
   RETURN VARCHAR2;                                                             
                                                                                
FUNCTION validate_parm(                                                         
      i_is_required     IN      PARM.IS_REQUIRED%TYPE,                          
      i_is_reserved     IN      PARM.IS_RESERVED%TYPE,                          
      i_dflt_val        IN      PARM.DFLT_VAL%TYPE,                             
      i_data_exists     IN      BOOLEAN,                                        
      i_external_value  IN      PARM.DFLT_VAL%TYPE                              
   ) RETURN BOOLEAN;                                                            
                                                                                
                                                                                
PROCEDURE update_sub_done;                                                      
                                                                                
PROCEDURE trim_failed_subs_data;                                                
                                                                                
PROCEDURE insert_bulk_data;                                                     
                                                                                
PROCEDURE insert_voice (                                                        
     i_run_cycle      IN  NUMBER                                                
   );                                                                           
                                                                                
END bresnan_voice_dm;                                                           

3705 rows selected.

SQL> spool off
